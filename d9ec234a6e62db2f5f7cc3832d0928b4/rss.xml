<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Rust技术前沿</title><link>https://wxrss.reinject.top/d9ec234a6e62db2f5f7cc3832d0928b4/</link><description>An RSS feed.</description><language>zh-cn</language><lastBuildDate>Sun, 26 Oct 2025 03:32:53 +0800</lastBuildDate><generator>wxrss -- https://github.com/0xlane/wxrss</generator><item><title>用 Rust 为 React Native 插上性能翅膀：跨平台开发新姿势</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485062&amp;idx=1&amp;sn=9308ae1a0ab433ff5e39530a39884ae7&amp;chksm=c2c7a1524b7c0cc575af40b598784064d36342f4a34872546afcb8971378e933913fa5210914&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[React Native 是一个用 JavaScript 构建移动应用的绝佳工具，但有时候我们需要更高的性能，或者想复用已有的原生代码。而 Rust 作为一门兼具高性能和内存安全的语言，正适合用来开发]]></description><author>Rust技术前沿</author><pubDate>Thu, 23 Oct 2025 17:13:00 +0800</pubDate></item><item><title>Rust 并不是一门函数式语言</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485046&amp;idx=1&amp;sn=41896a63b8e4fff34cc5c7dc3deb6627&amp;chksm=c2bfd2f957578bf806efcf330ac939df64aa10a7dd5834bc1a87c87507cf0ac4df9a0811ce9b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 并不是一门函数式语言这篇文章的目的就是澄清这个问题。先剧透一下结论：Rust 不是函数式语言。当然，这并不是说 Rust 有什么问题。它在自己擅长的领域做得非常出色。虽然 Rust 借鉴了一]]></description><author>Rust技术前沿</author><pubDate>Sun, 19 Oct 2025 17:11:00 +0800</pubDate></item><item><title>Go 和 Rust 都不让你“随便复制”，到底为什么？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485045&amp;idx=1&amp;sn=b833ab03a0ca740de668ee459909f2f9&amp;chksm=c214c84194a96527755c19fe2d8f0870f9afd8ea9a7bda2172919ea0717b8d4027740cc50141&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在编程语言的世界里，Rust 是一颗冉冉升起的新星。它不仅承诺了性能与安全的结合，更带来了让人又爱又恨的独特设计——尤其是它的所有权系统。这正是让许多开发者既兴奋又头疼的部分。先来看一段简单的 Rus]]></description><author>Rust技术前沿</author><pubDate>Wed, 15 Oct 2025 17:13:00 +0800</pubDate></item><item><title>Rust编程语言与C在嵌入式系统中的较量</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485039&amp;idx=1&amp;sn=131f519e82bf045b1f1eca7c5f6ec9f3&amp;chksm=c24ed4b419efc5bf7f2995c1ec31f932e2ee44d2183f00b948ac414ffddb6eb6c3add99f09b0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust编程语言与C在嵌入式系统中的较量Rust vs C - 简介:拜登政府正推动采用如Rust这样的内存安全编程语言于嵌入式系统中。然而，几十年来，C一直是嵌入式系统的主导语言，因其对硬件的精细控]]></description><author>Rust技术前沿</author><pubDate>Sat, 11 Oct 2025 17:14:00 +0800</pubDate></item><item><title>在 C++ 中混用 Rust</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485038&amp;idx=1&amp;sn=6686ecdc55a1a61edebcce35ffc64cf5&amp;chksm=c2aca5b3b3efa588596697ab4f401453b13967670fe8276b755f8d1432feaa0ba79b1985b5a2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本篇文章将帮助你逐步在 C++ 项目中引入一些 Rust 代码。前几天在一本关于某编程语言的书里读到：“……是一种通用编程语言，强调类型丰富的轻量级抽象设计与使用。它特别适合资源受限的应用场景，例如那]]></description><author>Rust技术前沿</author><pubDate>Tue, 07 Oct 2025 17:16:00 +0800</pubDate></item><item><title>用 Go 重写 TypeScript？为什么不选 Rust？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485037&amp;idx=1&amp;sn=338298901ed8b8ef1a30ce169db7685e&amp;chksm=c2bdf349bbfe4043bf7e8d76372e7255b30151bb2060e1b42cf0944e73e9f200d168e2e903de&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[“为什么不用 Rust？”——这个问题成了热议焦点TypeScript 正在被用 Go 语言重新实现。这无疑是个令人振奋的消息，因为这意味着 tsc 编译器的编译速度将提升约 10 倍，而在 VS C]]></description><author>Rust技术前沿</author><pubDate>Fri, 03 Oct 2025 17:09:00 +0800</pubDate></item><item><title>Rust + Python 强强联合：内存省97%，速度翻倍的秘密在这里！</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485036&amp;idx=1&amp;sn=71dcfc8ff6f651604bf97f9bdb88b026&amp;chksm=c24bf472470031fd192b24154401c780628ae2d9c6d901f818e358ce85248a93fdfdc844f237&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[如果你的 Python 代码运行得不够快，你可以选择用其他语言来加速它。其中一种方法是使用 Rust 来编写扩展模块。Rust 有着现代化的工具链，包括一个包管理器 Cargo 和内置的构建系统。更重]]></description><author>Rust技术前沿</author><pubDate>Sun, 28 Sep 2025 17:14:00 +0800</pubDate></item><item><title>为什么 Rust 编译器这么慢？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485035&amp;idx=1&amp;sn=62aafa1cd0bd714802c06aa41c4ebff1&amp;chksm=c251fbe387d7630f3a1d14f3f01c25d7a3b491889d027285d3db90e81719e49b9731a3bc28c3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[为什么 Rust 编译器这么慢？目录为了把你的 Rust 程序放进容器里，通常你可能会看到这样的 Dockerfile：FROM rust:1.87-alpine3.22 AS builderRUN]]></description><author>Rust技术前沿</author><pubDate>Tue, 23 Sep 2025 17:11:00 +0800</pubDate></item><item><title>Rust 正在颠覆嵌入式开发：内存安全如何做到零妥协？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485006&amp;idx=1&amp;sn=38a5494226fc32be95e5090390ad7665&amp;chksm=c2fe26ddb954e0acb7a956ba7acb585f82356f754682831a9aedf13e1ac94a662f6ee7ce1d7a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[近年来，Rust 编程语言在嵌入式系统开发中逐渐崭露头角。凭借其对内存安全、性能和并发的重视，Rust 相较于传统的嵌入式语言如 C 和 C++ 有着显著的优势。本文将探讨 Rust 在嵌入式系统中的]]></description><author>Rust技术前沿</author><pubDate>Wed, 17 Sep 2025 17:13:00 +0800</pubDate></item><item><title>Rust的三大杀手锏：性能、安全、并发，你能拒绝吗？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485005&amp;idx=1&amp;sn=b3dac4f924bbbb0bdc2ec282f772010f&amp;chksm=c2a95c2724cc32bd60c8edbb9972a8c51cb5dad497526a70c579f83467f10ba2240da2ff8789&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[为什么要在 2025 年学习 Rust？根据开发者调查数据，Rust 已经跻身 IT 行业中被广泛使用的前 12 种编程语言之列。数据显示，有 10%-13% 的软件开发者在日常工作中使用 Rust。]]></description><author>Rust技术前沿</author><pubDate>Sat, 13 Sep 2025 17:18:00 +0800</pubDate></item><item><title>内存安全革命：为何Rust正在挑战C++的霸主地位？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485004&amp;idx=1&amp;sn=7c7a30bf49b69ad23673d7e2dd043b0b&amp;chksm=c2817dcfbae86ee545d71c108360284fa0d972ee0ce0165b79d0e831294ead5fa903d9dda0b3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[C++ 成熟已久，而 Rust 才刚刚起步。那是不是意味着开发者应该放弃 C++ 转投 Rust 的怀抱呢？其实不然。在为新项目选择编程语言时，程序员从来不缺选择。无论是构建浏览器应用还是开发游戏，C]]></description><author>Rust技术前沿</author><pubDate>Tue, 09 Sep 2025 17:11:00 +0800</pubDate></item><item><title>性能提升百倍？Rust 内联汇编如何让 POPCNT 发挥神力</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247485003&amp;idx=1&amp;sn=6a547e16359d509a4be44d1e4cd8bbba&amp;chksm=c2b707568acb02a1831f322495fdc3bcb9d8cbd017912c21f63158f015cf96c567c5511b6083&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 以其安全性和高性能著称，非常适合构建稳定可靠的软件。但在某些场景下，我们还需要对代码与硬件之间的交互拥有更精细的控制。这时候，内联汇编（Inline Assembly）就派上用场了。内联汇编]]></description><author>Rust技术前沿</author><pubDate>Thu, 04 Sep 2025 17:14:00 +0800</pubDate></item><item><title>Rust 裸函数正式稳定：系统编程的“汇编自由”时代来了</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484986&amp;idx=1&amp;sn=b9804da7f9bd2d4439e81da439684f3b&amp;chksm=c244764efab46d22b02c175d57d208e395e1b41b1f5355973618b0663cb11149081b35f5fb72&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 语言在 2025 年 7 月 3 日迎来了一个重要更新：#[unsafe(naked)] 属性和 naked_asm! 宏正式稳定。这两个新特性允许开发者定义“裸函数”（naked func]]></description><author>Rust技术前沿</author><pubDate>Sun, 31 Aug 2025 17:13:00 +0800</pubDate></item><item><title>Go 与 Rust：何时选择 Rust，何时选择 Go？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484982&amp;idx=1&amp;sn=eaa7bdd2c124268e56a83b499c36f837&amp;chksm=c233751731ebb9c58d1cf32954456e7b5a130c9b023b359cb6ba09f2aa23a6eac8c818e1fcd7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Go 与 Rust：何时选择 Rust，何时选择 Go？Go 和 Rust 是两种风格迥异的编程语言。Go 更适合构建可无限扩展的 Web API 和小型服务，尤其是借助 goroutine 的强大能]]></description><author>Rust技术前沿</author><pubDate>Wed, 27 Aug 2025 17:16:00 +0800</pubDate></item><item><title>初识 Roto：一门为 Rust 打造的编译型脚本语言</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484981&amp;idx=1&amp;sn=3a6e5a89ff31132cf0970c17c74ff934&amp;chksm=c25bceb402e185f8e544cc32f7d20c3e2cf7a148ee36e5b30772c525f7668e0d64491bfa024d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[初识 Roto：一门为 Rust 打造的编译型脚本语言正在打造一款专为 Rust 设计的嵌入式脚本语言，名为 Roto。它的目标是成为一种既简单又快速可靠的脚本语言，适用于各类 Rust 应用。这个想]]></description><author>Rust技术前沿</author><pubDate>Fri, 22 Aug 2025 17:11:00 +0800</pubDate></item><item><title>没有悬空指针的世界：Rust 是如何做到的？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484973&amp;idx=1&amp;sn=0558b7e181e68947ec9dd6d73b3a7381&amp;chksm=c2a5195a488cacb9380d4d06243ec0dd765a83cdfe565fa96f6e4709680697f4fee6b87ebcb3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[1. 没有垃圾回收机制也能保证内存安全Rust 的内存管理是它的一大亮点。不像依赖垃圾回收器的语言那样，Rust 是在编译阶段就确保了内存安全。这意味着你的程序运行时不会因为内存管理而产生额外开销。R]]></description><author>Rust技术前沿</author><pubDate>Sun, 17 Aug 2025 17:09:00 +0800</pubDate></item><item><title>Rust重写实战：渐进式迁移如何让代码更安全、更简洁？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484972&amp;idx=1&amp;sn=83edb8449307bf3aa8ae442c39f28f90&amp;chksm=c27ccd8a9ad13f0daa11607fb9d6c0c8bbfce13ea3b3328222fe89b3ac898923ab390e023f21&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[渐进式重写的好处这次重写是渐进式进行的，采取的是“边走边停”的节奏。正如预期的一样，在重写过程中我们仍然需要添加新功能，这种渐进的方式非常灵活和顺畅。对比一下那种错误的做法——另起炉灶、并行开发一套全]]></description><author>Rust技术前沿</author><pubDate>Wed, 13 Aug 2025 17:18:00 +0800</pubDate></item><item><title>从238秒到25秒：优化Rust构建之旅</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484965&amp;idx=1&amp;sn=d294a4ce0c9efb79a4766125e6aa65fe&amp;chksm=c2f7708842911ce4fc596863f2390a9a301e9869d60df6ea4e5ffdd53a9e005b3b2db146ed8d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[从238秒到25秒：优化Rust构建之旅初版 Dockerfile：简单但低效最初的Dockerfile采用的是典型的多阶段构建方式：# 构建阶段FROM rust:alpine as builder]]></description><author>Rust技术前沿</author><pubDate>Fri, 08 Aug 2025 17:21:00 +0800</pubDate></item><item><title>PyO3 实战揭秘：如何用 Rust 让 Python 性能飙升？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484959&amp;idx=1&amp;sn=b9562c26b552cec1e9dac3574c32b20e&amp;chksm=c28ba3725507cbb30060e0cb02d0e2b239fd09c86c42196fd24aff672a6d8a3e7ec28365c34c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 与 Python 强强联手：PyO3 让一切变得简单在现代软件开发中，Python 因其灵活易用而广受欢迎，但面对性能要求高的任务时，它往往显得力不从心。这时候，Rust 凭借其出色的运行效]]></description><author>Rust技术前沿</author><pubDate>Mon, 04 Aug 2025 17:09:00 +0800</pubDate></item><item><title>使用 Rust 与 Docker 构建 AI 解决方案</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484955&amp;idx=1&amp;sn=f968b8fb1319f5b3423b018349b2ccad&amp;chksm=c2cb6afac0f03cc331c0cf385c75356d9779f54df63ea024bcf4b964983adc1e9ece48f35715&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[近年来，人工智能在开发领域的热度持续攀升。虽然 Python 一直是 AI 领域的主流语言，但 Rust（常被称为 Rust Lang） 正迅速崛起，成为一种极具潜力的替代选择。Rust 编程语言以其]]></description><author>Rust技术前沿</author><pubDate>Thu, 31 Jul 2025 17:11:00 +0800</pubDate></item><item><title>SM-2算法“难度陷阱”揭秘：为什么你的记忆效率在下降？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484951&amp;idx=1&amp;sn=6f10c934caf648e7331cb9ac375f7532&amp;chksm=c25defe777c505c47a569d05b7d34ff61086c0be091796f2af24f92995649296f38ee4fc8219&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[算法介绍我们为什么需要一个算法来安排复习？如果每天复习所有卡片，那简直是噩梦——最多只能维持两百张左右的卡片量。而调度器就像是对人类记忆的一个简单、定量模型。模型越准，我们就越能高效地把知识刻进长期记]]></description><author>Rust技术前沿</author><pubDate>Sun, 27 Jul 2025 17:26:00 +0800</pubDate></item><item><title>Rust认证库全解析：构建安全应用的九大利器</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484932&amp;idx=1&amp;sn=63e1611d6be88c2fbe1498710e8115b6&amp;chksm=c2b897da200464f9f7d1ecbac8795ed1d0ffbcb4ef2f4d5a8e763134247310a9ce1078f728f9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本文将介绍九个稳定且适合生产环境的Rust认证库，基于以下标准进行评估：流行度、完整性、维护情况以及对稳定版Rust的支持情况。同时也会简要提及一些虽未完全准备好但值得关注的库。9个适合生产的Rust]]></description><author>Rust技术前沿</author><pubDate>Thu, 10 Jul 2025 17:12:00 +0800</pubDate></item><item><title>无依赖随机魔法：Rust中实现零外部库的随机数生成</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484931&amp;idx=1&amp;sn=b15dcc9d35929ac53d4d75a29616c272&amp;chksm=c2749b4716c23196317c2189322ae94887e79a34183022f388f18ff7d7d2d0c7ada04713c451&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[随机数的生成就像魔术一样，从确定性的源头产生出如此不可预测的结果。首先，需要明确的是，在我们日常使用的现代计算机上，真正的随机性是不存在的。这是因为计算机本质上是设计为确定性的机器。例如，当我们输入2]]></description><author>Rust技术前沿</author><pubDate>Mon, 07 Jul 2025 17:08:00 +0800</pubDate></item><item><title>eBPF Tail Calls 使用 Rust 的 Aya 实现</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484921&amp;idx=1&amp;sn=3683d5bac053f35c7cf3e43fa4069828&amp;chksm=c2ae91062befa0628b485f5a22eb557492a8489d02d02b0587706726d251cac5d80511893a04&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[简介：尾调用在 eBPF 中，通过使用尾调用可以将复杂的逻辑分割成多个程序，这就像编程语言中的“goto”语句。使用尾调用的好处包括将复杂性分散到更小的部分中，并且可以在不中断服务的情况下更新或替换逻]]></description><author>Rust技术前沿</author><pubDate>Thu, 03 Jul 2025 17:11:00 +0800</pubDate></item><item><title>揭秘Rhai：如何用Rust构建既简单又强大的游戏脚本？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484903&amp;idx=1&amp;sn=26d75be1405aa0c2ccdc42be39b1671f&amp;chksm=c2b165ee59762dfbf935779c4726241041360037a24f7f2856a87d18b7c74d8da0e01895b73f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rhai是一种为Rust设计的嵌入式脚本语言，它提供了一种安全高效的方法来向Rust应用中添加脚本。Rhai的语法与JavaScript类似，使得学习曲线相对平缓。若对Rust还不熟悉，可以回顾相关基]]></description><author>Rust技术前沿</author><pubDate>Sun, 22 Jun 2025 17:13:00 +0800</pubDate></item><item><title>Rust表达式：重构代码的隐形魔法</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484902&amp;idx=1&amp;sn=028bd294dcb95c41aae734341ab75518&amp;chksm=c2de9ab7d85ccc92eb7b8d85d5975a5d11a9a53c9b131ce5f3feeebc9e8b3aca016db4dfd51f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 对表达式的重视是这门语言中一个被低估的特性。一旦将表达式作为Rust的核心机制来接受，编写代码就会感觉更加自然。可以说，表达式影响了对控制流的整体思考方式。“一切皆表达式”虽然有些夸张，但在]]></description><author>Rust技术前沿</author><pubDate>Sat, 21 Jun 2025 17:24:00 +0800</pubDate></item><item><title>Rust中JWT认证：构建安全无状态API的终极指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484891&amp;idx=1&amp;sn=832756890fe3f5d3e4fef4fb46b06a09&amp;chksm=c248c3cab9011c1db2d3c9654d9a17fe3315c37ef97f4b3ee591e51480bc53fbebfa69469489&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[JWT认证简介JWT是一种用于在系统之间安全表示属性或声明的标准。它们可以被用于客户端-服务器环境中以实现无状态授权，而与之相对，cookie则是有状态的。不过，JWT的应用远不止于此，它们还能够在微]]></description><author>Rust技术前沿</author><pubDate>Thu, 19 Jun 2025 17:15:00 +0800</pubDate></item><item><title>掌握Rust中的数据流动艺术：环形缓冲区的实际应用</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484890&amp;idx=1&amp;sn=ec7bcf2d4b87af220061351f8ad44377&amp;chksm=c27c356bb7113641a8606765e71aad4ea75b4ecdd3a598af8c95011fa6bb34696e31b682cd68&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是环形缓冲区？环形缓冲区也被称为循环队列或循环缓冲区。它实际上就是一个数组，或者说是项挨项排列的缓存、队列或列表。你可以像操作任何其他缓冲区一样向其中添加或移除元素。特殊之处在于它的首尾相连，就像]]></description><author>Rust技术前沿</author><pubDate>Wed, 18 Jun 2025 17:16:00 +0800</pubDate></item><item><title>使用Rust和Axum构建JWT认证API</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484881&amp;idx=1&amp;sn=333d9b5a6bced5c907ba7fbcb5180052&amp;chksm=c26b82b6f98007495aafff84b128089b61da23ce37014f86834faadccac3081b0368a4bb3234&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用Rust和Axum构建JWT认证API想象一下，如果要建造一座复杂的桥梁，你不会只用一把螺丝刀。同样地，构建复杂的Web API认证系统时，仅靠基础的Rust语言是不够的，这时Axum框架就显得尤]]></description><author>Rust技术前沿</author><pubDate>Sun, 15 Jun 2025 17:12:00 +0800</pubDate></item><item><title>Rust哈希设计：挑战与创新的碰撞</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484863&amp;idx=1&amp;sn=1d37fdbcb0d04401582194f05c15108c&amp;chksm=c234e5317bc853cf64a1e75bd2c5ccf3f55513e66735639c1514436c1dd74bcaf7755b995318&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在像Python、Java或C++这样的语言中，值的哈希是通过调用它们类型的“给我哈希”方法实现的。这个固定大小的哈希值随后被直接用于哈希表等结构中。这种设计存在一些明显的问题：如何对整数进行哈希？如]]></description><author>Rust技术前沿</author><pubDate>Fri, 13 Jun 2025 17:19:38 +0800</pubDate></item><item><title>使用egui在Rust中构建跨平台GUI应用程序</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484859&amp;idx=1&amp;sn=4c42a4a1a8e17dd608c5d73e3067d374&amp;chksm=c23ade13a0353d9073664c63a86e86403eb4adff2870044f15c95b55eb3b0f1ffa144117274d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用egui在Rust中构建跨平台GUI应用程序本文将探讨如何使用它构建一个简单的跨平台GUI应用程序。我们将构建一个非常简单的宠物管理应用程序，允许添加和删除宠物，并展示列表和详细视图。为了增加趣味]]></description><author>Rust技术前沿</author><pubDate>Thu, 12 Jun 2025 17:11:00 +0800</pubDate></item><item><title>掌握eBPF与Kprobes：用Rust和Aya揭秘内核行为</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484855&amp;idx=1&amp;sn=f1a415e3bc45fdb9b33196cf67ee46ef&amp;chksm=c27b37dc85539e803387ff47018c8cf4107906793a9e798b381b5f1924dbafbad92ae5dc4602&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用Rust和Aya编写eBPF Kprobe程序在本文中，将介绍如何使用Aya与Rust创建一个eBPF Kprobe程序。Kprobes简介Kprobe（内核探针）是Linux内核的一种调试和跟踪]]></description><author>Rust技术前沿</author><pubDate>Tue, 10 Jun 2025 17:09:00 +0800</pubDate></item><item><title>用一周时间编写一个Rust SQL解析器？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484851&amp;idx=1&amp;sn=96409d1c6444813772a0cc1f3906ffea&amp;chksm=c296f1df994f6119344102c2148f3c1c09a98b3811995072c45b4ae190a076b6bd5bb61788c6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[用一周时间编写一个Rust SQL解析器？标题有点夸张，但生产级别的SQL解析器确实不可能在短短一周内完成。然而，本文会讲述为什么湖帆决定转向内部解决方案进行SQL解析，以及如何在一周内打下我们SQL]]></description><author>Rust技术前沿</author><pubDate>Sat, 07 Jun 2025 17:11:00 +0800</pubDate></item><item><title>构建适用于Android的Rust游戏</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484850&amp;idx=1&amp;sn=8d04f5a5ca8c711989b7f40a7452d3b8&amp;chksm=c2c5f37825c3b4eebabe00400f8c99cedd3b267c60377d24e46d9c5a419f2a22372383e729a1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[构建适用于Android的Rust游戏本文并非一份完整的逐步教程，而是一个关于在创建类似设置的Android游戏时可能遇到的一些问题的松散描述。最终/当前的游戏代码是公开的，并分为两个仓库：一个自定义]]></description><author>Rust技术前沿</author><pubDate>Fri, 06 Jun 2025 17:11:00 +0800</pubDate></item><item><title>Swift与Rust：对比指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484849&amp;idx=1&amp;sn=7d2bb7513b6da40a756ecdcc2ee75685&amp;chksm=c27292b3bd3ab78f1ccd975ef4490f0109c607cae048e106b5bf6271ec818db5c3c968821c1b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Swift是什么？Swift是一种直观、命令式的多范式通用编程语言，以其安全性、性能、现代编程特性和实践以及设计模式的易实现性著称。Swift的速度、简洁性和表现力是开发者选择它的原因。虽然Swift]]></description><author>Rust技术前沿</author><pubDate>Thu, 05 Jun 2025 17:12:00 +0800</pubDate></item><item><title>静态栈使用分析工具的实现</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484838&amp;idx=1&amp;sn=fae5e6943d696531ec5b575e65a0ab74&amp;chksm=c26594ef04ce69e1b1d3fdb5e5cd0d09b0ab8292dfba541d85f7eb87860bd315dfc68b6de041&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[静态栈使用分析工具的实现动机为什么想要在编译时分析程序的栈使用情况呢？显而易见的答案是，当希望知道应用程序是否会遇到栈溢出问题，而又不实际运行程序时。这对嵌入式应用来说尤为重要，因为在这些场景中，栈溢]]></description><author>Rust技术前沿</author><pubDate>Sat, 31 May 2025 17:07:00 +0800</pubDate></item><item><title>从C++到Rust：线程安全的革命性转变</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484837&amp;idx=1&amp;sn=c5333769e0910574ff7c17af75ace6fc&amp;chksm=c26e0d6c00cf51b17c109ddd82d027e50e905a716345e29eec0f7f136075af988504f092022b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在研究Rust的线程模型时，发现了C++与Rust术语之间的一些对应关系，这在之前并没有见到过。这里分享一下这些见解，希望能帮助有C++背景的人更好地理解Rust（或反之亦然）。C++中：虽然C++标]]></description><author>Rust技术前沿</author><pubDate>Fri, 30 May 2025 17:11:00 +0800</pubDate></item><item><title>Rust生命周期：新手入门的隐形壁垒？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484836&amp;idx=1&amp;sn=e7c4eb54dd88ee6445f7f3a773556d4f&amp;chksm=c2be45eafa8ab1ad8fde3ec46e697cc3102168c2ce8c71a5222669fb60604e7dac1e2f3c150d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[生命周期并不完全等同于变量在内存中存在的时间长度举个例子来说明生命周期：fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {   if x.len()]]></description><author>Rust技术前沿</author><pubDate>Thu, 29 May 2025 17:12:00 +0800</pubDate></item><item><title>探索Rust中的OpenGL：构建交互式应用的未来之路</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484835&amp;idx=1&amp;sn=85d0d2ce70e8842043565bdff00ce467&amp;chksm=c225ea67159e7a535e09067ad143bf3054dabfc61fc4239909a39bfa8212a8e57c4a216eb84d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[计算机图形学是一个将科技与艺术结合在一起，既迷人又充满挑战的领域。最近，随着虚拟现实和增强现实技术的迅猛发展，对计算机图形学的研究变得前所未热。在众多可用的图形API中，OpenGL以其跨平台和用户友]]></description><author>Rust技术前沿</author><pubDate>Wed, 28 May 2025 19:41:44 +0800</pubDate></item><item><title>GDB调试Rust异步应用：从入门到精通的指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484822&amp;idx=1&amp;sn=7085c3bcaacb90225d8b6ff840d1e5d2&amp;chksm=c24ac2d7dacd404a403ae9787e166c65821aa0142474c202f972dccd8ce4f27853e93da234ba&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[GDB简介GNU Project Debugger（简称GDB）是由Richard Stallman于1986年编写的老牌程序，支持多种语言，包括C/C++以及现代语言如Rust。GDB是一个命令行应]]></description><author>Rust技术前沿</author><pubDate>Tue, 27 May 2025 17:11:00 +0800</pubDate></item><item><title>从冗长到简洁：Rust中函数式编程的转型</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484821&amp;idx=1&amp;sn=307b2cc99d8b49cca718594f03e95ab6&amp;chksm=c261311c51aff4c26943a8b8b7a566b5dea7e0d7e835d2e8da220a44eebedcfb44e96ee37f65&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust中的编程范式导航Rust是一种多范式的编程语言，支持命令式、面向对象以及函数式编程风格。选择哪种风格往往取决于开发者的背景和所要解决的具体问题。由于Rust吸引了来自C++、Java、Pyth]]></description><author>Rust技术前沿</author><pubDate>Sun, 25 May 2025 17:14:00 +0800</pubDate></item><item><title>Rust 1.80革新：自动检查`#[cfg]`配置</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484820&amp;idx=1&amp;sn=a5694b5b8b778218ecb666b2f460c546&amp;chksm=c2dae2b76f62fcdbc5e582151a7a6dc667f9812705c55ce01ed0b7ac65a253bec738d0053dd4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[自动检查的意义每当声明一个Cargo特性时，该特性会被转化为传递给rustc（Rust编译器）的配置项，以供其验证是否有任何#[cfg]、#![cfg_attr]或cfg!宏使用了非预期的配置，并通过]]></description><author>Rust技术前沿</author><pubDate>Sat, 24 May 2025 17:14:00 +0800</pubDate></item><item><title>Nushell深度解析：Rust打造的跨平台Shell革命</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484819&amp;idx=1&amp;sn=68fdfbc2ee20def07ab444bc7e068b27&amp;chksm=c2ad2ccfb82b2db15bf4917f389e6ef3975ad75be289e10b4d71c7bd61acb2a655b18417a458&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Nushell概览Nushell是一个使用Rust构建的现代跨平台shell，与Bash、PowerShell、命令提示符和Zsh类似。它在任何操作系统上都能轻松安装，并且对于从Unix-like s]]></description><author>Rust技术前沿</author><pubDate>Fri, 23 May 2025 17:11:00 +0800</pubDate></item><item><title>探索CXX-Qt：连接Rust与Qt的未来桥梁</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484818&amp;idx=1&amp;sn=6015397831e853a4464709efa569624a&amp;chksm=c2057b55ed002c8e8cfe8bf9f354efbaf4013ffd6f11210d3d4cb03287cf976ecd7d730bc987&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[随着渐进式Web应用的兴起，每天发布的桌面应用程序数量也相应增加。只需看看GitHub或GitLab上的趋势项目就能发现这一点。例如，在ChatGPT API发布后不久，便涌现出了数百款桌面应用程序。]]></description><author>Rust技术前沿</author><pubDate>Thu, 22 May 2025 17:13:00 +0800</pubDate></item><item><title>Rust开发者的抉择：何时拥抱输出参数以提升效率？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484817&amp;idx=1&amp;sn=c15673b1d19650a65076c143b1ab12c6&amp;chksm=c2cf0ba4578cb9d76cc485a4c2f721aed19411f82e0dd801f2582da3b1899514b60235b08252&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在编程中，有一个相当直接的设计模式叫做“输出参数”，你可能之前有所耳闻。简而言之，问题在于，你的函数是否像这样修改数据：fn foo() -> i32 {   // 代码省略}let x = foo(]]></description><author>Rust技术前沿</author><pubDate>Wed, 21 May 2025 17:07:00 +0800</pubDate></item><item><title>面对Rust的冲击，Python将何去何从？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484816&amp;idx=1&amp;sn=95f8f06856fc7d468e16d76e0c9f6ec4&amp;chksm=c24ecaad642a86fba3b3c38902277b0d36739c99dff2b2d4a1ab0de76fcf58c774a490b0c3ba&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust与Python：一场对决Rust和Python都是流行的编程语言，在软件开发和数据科学领域有着重叠的应用场景。近年来，Rust的采用率显著增长，这让很多人思考它是否会最终超越Python成为顶]]></description><author>Rust技术前沿</author><pubDate>Tue, 20 May 2025 17:08:00 +0800</pubDate></item><item><title>探索无缝Rust互操作对于新语言的意义</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484782&amp;idx=1&amp;sn=c2540a15b3afcd166b7c0775fffe6ef1&amp;chksm=c2fc099d8efbbe0516056560532dc7bcca00344b6e8ba9f9fb1383741808b5feaf4590c00ed1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[探索无缝Rust互操作对于新语言的意义关注于内存安全和速度的新语言面临的一个挑战是如何与现有的生态系统进行交互。像C++、TypeScript、Kotlin和Swift这样的语言通过利用另一门现存语言]]></description><author>Rust技术前沿</author><pubDate>Mon, 19 May 2025 17:09:00 +0800</pubDate></item><item><title>Flutter与Rust跨界联手：打造跨平台开发新纪元</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484781&amp;idx=1&amp;sn=81e3ce684c033f9e87c1668df3e27382&amp;chksm=c2c144d4123dd1640403099411c1cb58fcbbf629be0fa049ef7fba6918a90d5339331bbdbc98&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用Rust与Flutter的理由假设我们需要获取当前设备的电池电量。如果没有任何插件提供这种功能，那就必须解决两个问题：如何在本地代码和Flutter之间传输数据，以及如何处理不同平台的特定语言（如]]></description><author>Rust技术前沿</author><pubDate>Sun, 18 May 2025 17:09:00 +0800</pubDate></item><item><title>Rust、SQLite与Rocket：构建高效API的新纪元</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484780&amp;idx=1&amp;sn=f480b00fc3adc594465a5700639d3bbd&amp;chksm=c2a6910717fa6794dbeaa44c310d599bb9437afc7f5e8cb2abe1fd1630bc5c682d625430d891&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是SQLite？SQLite是一款关系型数据库管理系统，以其设置简单和资源消耗低著称。它无需服务器支持，配置零成本。作为一个跨平台的文件数据库，SQLite几乎不需要管理。它的事务符合ACID属性]]></description><author>Rust技术前沿</author><pubDate>Sat, 17 May 2025 17:09:00 +0800</pubDate></item><item><title>提升Node.js性能的Rust之道</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484761&amp;idx=1&amp;sn=b957cf226930bb8d807057020a9af417&amp;chksm=c2dbd446b3549a69b8f9f87025bcd540db79f0357ef5eb14a87cc44b64d0cca781e1443b4c19&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust与Node.js如何协同工作？Rust是由Mozilla开发的一种系统编程语言，以其速度和处理并发任务的能力著称。它的一个显著特点是能够原生使用C函数和库，并能将函数导出供C使用，这大大提升了]]></description><author>Rust技术前沿</author><pubDate>Thu, 15 May 2025 17:07:00 +0800</pubDate></item><item><title>从0到1：使用Docker和Rust构建不可撼动的应用部署流程</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484752&amp;idx=1&amp;sn=956d5315863e6a103f52cf7762bc91ad&amp;chksm=c2e5401e2a0ab229d496cd82ead73db3163d952be55ad69750628c9062ab77509bb734edfac0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是部署？软件部署指的是使一个软件系统可供最终用户使用的活动、程序和步骤。它也可以指将软件系统或应用程序迁移到远程服务器的过程。这包括但不限于安装、构建、测试、发布和性能监控等自动化或手动过程。创新]]></description><author>Rust技术前沿</author><pubDate>Tue, 13 May 2025 17:14:00 +0800</pubDate></item><item><title>安全性与可靠性之选：Rust、Ada、SPARK，谁更适合你？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484751&amp;idx=1&amp;sn=343ee0017d1ffdf8833f17ab9f4de412&amp;chksm=c2056719bd223d5148a3754ad1c63d41737f4e229d0bf56d559c2cb9e09b0a457602f2dc9edb&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在支持开发高完整性软件，特别是嵌入式系统方面，选择正确的编程语言至关重要。2024年，当谈到替代C/C++的选择时，Ada、SPARK和Rust成为了热门话题。C/C++——默认却有风险的选择在嵌入式]]></description><author>Rust技术前沿</author><pubDate>Sun, 11 May 2025 17:09:00 +0800</pubDate></item><item><title>揭秘No-Panic Rust：C库开发者的新宠？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484750&amp;idx=1&amp;sn=7fe1b1a4316352707a10b42cd900c441&amp;chksm=c2ae43584cd33fe1c175a20e1e886e3362cb807cb39c18a7428d7605b7a125e59baa94cfe0c6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust在系统编程中的应用：无需恐慌的技术什么是Panic？Panic是Rust处理不可恢复错误的方式。遇到错误时，通常有三种处理方式：立即处理错误（例如重试操作或采取备用方案）。将错误传播给调用者，]]></description><author>Rust技术前沿</author><pubDate>Sat, 10 May 2025 17:09:00 +0800</pubDate></item><item><title>探索未来：Rust代码编译中GCC与LLVM的巅峰较量</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484749&amp;idx=1&amp;sn=3f34e89022ad35c6f08104f11ad79504&amp;chksm=c25dff3c295f78ce39c4cd069748cf93ec60d8ece63671c6db978fe613b3785f509881499907&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust编译器以其优化代码性能和管理内存的能力著称，这得益于借阅检查器（borrow checkers）。Rust代码通过官方编译器rustc进行编译，而rustc使用LLVM作为后端来优化并转换高级]]></description><author>Rust技术前沿</author><pubDate>Fri, 09 May 2025 17:07:00 +0800</pubDate></item><item><title>Rust与Zig对决：谁是系统编程的未来之星？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484748&amp;idx=1&amp;sn=a0d694a585cd6f74f6d5c9e3fd539010&amp;chksm=c2049e5cc128ea1844120a001bc9da3bc5146ff95f5c97c3edf37428ed432a05885a84d3fbee&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[说到 Rust 和 Zig，它们之间有着引人入胜的对比。这两种语言都致力于编写高效且高性能的代码，但实现方式不同。两者都能编译成本地可执行的二进制文件。这些语言基于完全不同的概念和哲学构建，影响着开发]]></description><author>Rust技术前沿</author><pubDate>Thu, 08 May 2025 17:09:00 +0800</pubDate></item><item><title>避免Rust Panic：更安全的Option None处理策略</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484728&amp;idx=1&amp;sn=dda411d25195f362f8c6ef995c71e50e&amp;chksm=c21f2f7c0277df4d613d2997e3296fc73816a644522286658c10d31cd979ba14e99f53e685f5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[处理 Option 类型时避免直接 unwrap()：有更好的方法。注意到在 Rust 中，如果不依赖 unwrap() 来处理 Option 的 None 变体是一个常见的小麻烦。具体来说，当希望在]]></description><author>Rust技术前沿</author><pubDate>Wed, 07 May 2025 17:09:00 +0800</pubDate></item><item><title>Rust 加密库：全面指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484724&amp;idx=1&amp;sn=bc0d19a07c263c6118116d22c99542d2&amp;chksm=c2e813ad562fb7d45a000ce1f52d4d694cdd081b6c4abcfb06923b5e19079425e55b64f592d5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 加密库：全面指南加密是指将信息转换为安全格式的过程，主要通过加密实现。确保在网络中传输的数据是安全可靠的。尽管 Rust 拥有随机数生成器，但现今最常用的套件是 OpenSSL。正如本指南所]]></description><author>Rust技术前沿</author><pubDate>Mon, 05 May 2025 17:09:00 +0800</pubDate></item><item><title>深入Rust核心：解析更快展开机制的秘密武器</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484723&amp;idx=1&amp;sn=40f647872de0b8bc5d5ffc53a3aab178&amp;chksm=c2c5020dc8aeb134b3a4b2c299a66b21e33845841f7ebdaf27446886599a957c62b6b0aa2ea3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[将更快的异常机制引入Rust真正的明星是展开机制，它驱动着恐慌（panics）。这篇文章将探讨什么是展开，如何加速它，以及它如何为Rust和C++程序员带来益处。简而言之：看看这个crate，可以获得]]></description><author>Rust技术前沿</author><pubDate>Sun, 04 May 2025 17:11:00 +0800</pubDate></item><item><title>Rust并不是一种函数式语言</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484722&amp;idx=1&amp;sn=e142ccdde9b7afdfbd4ddeb71003fdb1&amp;chksm=c26c1f41781f0944d5cc18c85272d21340cc8f8549e3613a615ac17f8a057c7c846ce967a03f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust不是一种函数式语言关于Rust是否也能被称为函数式语言，似乎有些混淆。本篇文章旨在澄清这一问题。提前透露结论：Rust并不是一种函数式语言。这并不意味着Rust有任何不足：它在其设计目标上表现]]></description><author>Rust技术前沿</author><pubDate>Sat, 03 May 2025 17:09:00 +0800</pubDate></item><item><title>深入Bevy引擎核心：构建更直观的回合制游戏机制</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484721&amp;idx=1&amp;sn=731f247803b3e92f5852e68eae8cfd2b&amp;chksm=c269d88fdcea37c6b53212fbff1323f77f362f12cdc92778bd3204748f080c39a5a00393f498&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[基于Bevy的一次性系统实现回合制机制如果你曾经使用过Bevy引擎，你可能已经知道系统执行的顺序有些棘手，并不是完全确定的。这在回合制游戏场景中尤其痛苦，因为游戏逻辑更新需要遵循一个预定义的序列。默认]]></description><author>Rust技术前沿</author><pubDate>Fri, 02 May 2025 17:11:00 +0800</pubDate></item><item><title>Rust函数语法革新：迈向更简洁声明方式？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484720&amp;idx=1&amp;sn=34bf06eddbc49a6ca85cf3058e866746&amp;chksm=c20c114072dd56a4c3d6a9669f574592e716b40e9dc5b348f52faab6cdba7d004a6f7597260a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关于Rust函数语法本篇文章是一些思考，关于那些在Rust还年轻时没有时间深入考虑的事情，希望对正在创建新语言的人有所启发。不过，先来谈谈现有的fn语法。Rust在很多方面做得很好，使各种元素能够很好]]></description><author>Rust技术前沿</author><pubDate>Thu, 01 May 2025 17:06:00 +0800</pubDate></item><item><title>Rust首战告捷：如何规划你的第一个成功项目？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484719&amp;idx=1&amp;sn=768dab0dbf40dd65568d27921ea78769&amp;chksm=c2e4229b33652ce0e9c5c3eabb57968b4f4657d89635c96a8083cad2a21bf255f23d15558793&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[让第一个现实世界的Rust项目取得成功。Rust已经成为团队寻求编写安全高效系统时的热门选择。它在性能、安全性及并发性上的独特结合，使其成为从嵌入式系统到网络开发等多种应用的理想选项。然而，将Rust]]></description><author>Rust技术前沿</author><pubDate>Wed, 30 Apr 2025 17:11:00 +0800</pubDate></item><item><title>从零构建：Rust MIDI GUI的深度探索与实战</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484718&amp;idx=1&amp;sn=6faf42f5a841f6f2dae5d83c2c0d38f0&amp;chksm=c2499f413c42609007465143163733beac6b295261d99a107ce02dc96e12e98b88392d742a2b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一个项目（绝对不是今年的SIGBOVIK提交作品，也与计算机人体工程学无关）需要用到MIDI，并对其进行自定义处理。这意味着需要创建一些东西来接收并处理这些MIDI事件。然而，由于在开发过程中不可避免]]></description><author>Rust技术前沿</author><pubDate>Tue, 29 Apr 2025 17:12:00 +0800</pubDate></item><item><title>破解循环引用难题：Rust内存管理新视角</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484717&amp;idx=1&amp;sn=a790910ba53af351c5dd1fae4ed2acb3&amp;chksm=c29d4dbcb3c0e257d15f3f89b3af1ec5cfeb95a63ab00be0b26bccd40c87c54fbb12ff9efc41&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[对于Rust语言中的内存泄漏问题，我们来深入探讨一下。介绍Galileo AILogRocket的Galileo AI监控每个会话，揭示出重要的用户困境和关键行为模式。由于Rust对资源和内存的低级访]]></description><author>Rust技术前沿</author><pubDate>Mon, 28 Apr 2025 17:11:00 +0800</pubDate></item><item><title>从Tauri到egui：探索Rust最前沿的图形界面解决方案</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484716&amp;idx=1&amp;sn=c84726b28be86cc044496cd0efbac79d&amp;chksm=c28f34c5fd8d16d607a90ed8d1ecb70675017150da0974c30acf007a6bea63d2c7241b6476a1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本文深入探讨了Rust GUI库的现状。他关注开源、加密技术和无服务器技术，并分享了对Rust图形用户界面（GUI）库的见解。介绍Galileo AILogRocket的Galileo AI监控每一个]]></description><author>Rust技术前沿</author><pubDate>Sun, 27 Apr 2025 17:11:00 +0800</pubDate></item><item><title>探索顶级Rust Web框架</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484715&amp;idx=1&amp;sn=10ac16f4ea64c683601ffbadf4cfd738&amp;chksm=c27ac80fbae97fe6cde6e043957bf4d39609a1205bde3731d009eed234227851d14a1568c210&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[目录由于其开源、快速、可靠及高性能的特点，Rust成为最受开发者欢迎的语言之一。在构建项目时，考虑Web框架对于开发的优势与劣势非常重要。本文将讨论什么是Web框架，并探索Rust生态系统中的各种We]]></description><author>Rust技术前沿</author><pubDate>Sat, 26 Apr 2025 17:11:00 +0800</pubDate></item><item><title>重构JavaScript工具链：Rust带来的速度革命与挑战</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484714&amp;idx=1&amp;sn=8901b2043b9071330e4ea1cee86dde30&amp;chksm=c24f37b4fe7a5494ab513ad0f59aac99344595a1dad655681ef6215648d4f83472e6a04f4b81&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[直到最近，支持Rust工具中的JavaScript被认为不值得。主要担忧在于发送数据往返时的序列化和反序列化成本过高。然而，有一种方法可以完全消除反序列化的成本，只是这种方法还不广为人知。Rust与J]]></description><author>Rust技术前沿</author><pubDate>Fri, 25 Apr 2025 17:08:00 +0800</pubDate></item><item><title>Rust与Hyper：构建极简Web服务的指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484712&amp;idx=1&amp;sn=3c8d1745b5050ceac594a60c1c0ce401&amp;chksm=c2278aeeab8de5d39f293f90f463ef925e17be07ff00b645369437b6060167a2a1d260c07015&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本文是如何使用Rust语言中的hyper库构建简易网络服务的文章。简介在构建网络服务时，越简单越好。虽然采用一个功能齐全的重量级框架可以快速“完成任务”，但这种做法隐藏的复杂性可能带来诸多问题，比如性]]></description><author>Rust技术前沿</author><pubDate>Thu, 24 Apr 2025 17:11:00 +0800</pubDate></item><item><title>如何使用Buck构建Rust项目</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484707&amp;idx=1&amp;sn=51a304397edf41cb1e5232fd0211a7d3&amp;chksm=c28045a9dd1cd611813a770ac2537d46aecf9879e65dd59cee963339593195ec43a8b5ea4605&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用Buck构建Rust项目在2023年4月13日，Facebook/Meta发布了Buck2，这是一个用Rust编写的可扩展且高效的构建系统，旨在让构建体验更快更高效。最近对构建系统产生了浓厚的兴趣]]></description><author>Rust技术前沿</author><pubDate>Wed, 23 Apr 2025 17:09:00 +0800</pubDate></item><item><title>Rust无命名参数？揭秘高级替代策略！</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484706&amp;idx=1&amp;sn=e4d003e844778b2b91a526798478c435&amp;chksm=c2c85cd986f976688bc53001bc54a69bd81504edbc3aedec0da6f7dd7ccf9ea164393c1deb7d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust中没有命名参数，那该怎么办？在编程世界里，命名参数（或在某些地方称为关键字参数）非常受欢迎。如果不了解它们，这里有一个Ruby的例子来说明其工作原理：deffoo(a:,b:,c:)putsa]]></description><author>Rust技术前沿</author><pubDate>Tue, 22 Apr 2025 17:13:00 +0800</pubDate></item><item><title>Rust游戏引擎大揭秘：为何它能替代C++？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484699&amp;idx=1&amp;sn=71a907c12b345699e10337c942a388be&amp;chksm=c26d8d1e7dd9de44918eb70ddc0e4dc1c9c92c9511784dec35fb58c99ee941e05cf97f5c4768&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust为何适合游戏开发？在Rust发布之前，C++是游戏开发的不二之选。尽管如此，随着时间的发展，Rust凭借其所有权模型、静态类型系统和整体设计理念，逐渐成为开发者的宠儿。它不仅性能可靠，而且几乎]]></description><author>Rust技术前沿</author><pubDate>Mon, 21 Apr 2025 17:11:00 +0800</pubDate></item><item><title>揭秘Rust：为何95%的代码无需担心生命周期</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484658&amp;idx=1&amp;sn=f90da647f457307758cd1ccfd9a27bba&amp;chksm=c2e637f36b1c5d9f39c123925681b7726e11cefb23d342e7996de7bec71fe673bec1e6f8ec47&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[当人们说学习Rust很难时，他们常常提到生命周期（lifetimes）。然而，即使有了七年编写Rust的经验，95%的代码，可能更多，根本不需要任何生命周期注解！这是在学习Rust时确实过度担心的一个]]></description><author>Rust技术前沿</author><pubDate>Sun, 20 Apr 2025 17:11:00 +0800</pubDate></item><item><title>Rust快速上手指南：用最少的代码量构建最健壮的应用程序</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484657&amp;idx=1&amp;sn=6c2885d4f019122d295eff0023611ef1&amp;chksm=c2dd3f1ce706d6f06c53a721ee9e200908de21ea8be0a5f70f536160217a4717d73237aac667&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[编程是一个迭代的过程——尽管我们都希望从一开始就找到完美的解决方案，但这几乎不可能实现。优秀的程序往往始于快速的原型设计。不好的程序会停留在原型阶段，而最好的程序则会进化为生产代码。无论是开发游戏、命]]></description><author>Rust技术前沿</author><pubDate>Sat, 19 Apr 2025 17:09:00 +0800</pubDate></item><item><title>从零开始：探索Rust语言中区块链的简易实现与核心原理</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484656&amp;idx=1&amp;sn=ad4a78e644ac41b5bead40b50bab52ff&amp;chksm=c292be46b8363c8e5aff1c0fbaa36fc901b8153b98f6210a986388df71b752fb85e016916925&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[当谈及P2P技术及其现代应用场景时，区块链技术无疑是首先映入脑海的概念之一。过去十年间，在信息技术领域中，很少有话题像区块链技术和加密货币那样受到如此多的关注或争议。尽管大众对区块链技术的兴趣有所波动]]></description><author>Rust技术前沿</author><pubDate>Fri, 18 Apr 2025 17:11:00 +0800</pubDate></item><item><title>Tauri vs Electron：谁是下一代桌面应用开发的王者？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484644&amp;idx=1&amp;sn=48ef2a5c875586ecd7363be0c0c191fc&amp;chksm=c238f5e780ca1bea41bea2efbe6fddfd78c9d9bf5a430f18c55cb8a03a83646ae25e0692b19a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Galileo AI简介LogRocket的Galileo AI监控每一个会话，揭示用户的关键行为模式和重要的用户体验问题。Tauri是一个优秀的工具包，利用网页技术构建轻量级、安全且跨平台的桌面应用]]></description><author>Rust技术前沿</author><pubDate>Thu, 17 Apr 2025 17:09:00 +0800</pubDate></item><item><title>Rust进化论：从1.0到2024，编程语言的蜕变之路</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484643&amp;idx=1&amp;sn=679d84f63b2db33c89c5381601c1f340&amp;chksm=c2ba055ebd727cf648da93f845d370a6a96f4f8773438f29e8e69994da8f50029cdb5e969aa8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[2015年到2024年间，Rust经历了显著的变化。从第一个稳定版发布至今，已经过去了九年的时间，这段时间里共发布了78个主要版本和两个大版本，第三个大版本也将在今年晚些时候推出。这些变化虽说是逐步进]]></description><author>Rust技术前沿</author><pubDate>Wed, 16 Apr 2025 17:09:00 +0800</pubDate></item><item><title>解析MIDI：Rust中实现音乐设备通信的现代魔法</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484642&amp;idx=1&amp;sn=2c76c062a6e409d53e5a1e9d43facbd1&amp;chksm=c257c8bb16b02369649d853f51ed7f362ab56f940f4843d45492e986f016a25c0b2ecc543133&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[MIDI诞生于1983年，它依然是数字音乐设备间通信的标准，其设计之精妙令人赞叹不已。MIDI是什么以及为何如此重要？MIDI是一个用于数字乐器之间通信的接口标准，不仅定义了电子和硬件层面的内容，还涵]]></description><author>Rust技术前沿</author><pubDate>Tue, 15 Apr 2025 17:11:00 +0800</pubDate></item><item><title>揭秘Rust极速背后的秘密：深入LLVM优化机制</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484641&amp;idx=1&amp;sn=4c4970d0893672c7a5946df13f65f5d5&amp;chksm=c2c616e16f2b731717f4a8853bb4bfe3b32ab9e6a6c5ae95a554e3b6b60e945f2ade75ea3d9d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[当我们用cargo run或者直接调用rustc编译Rust代码时，其中一个阶段就是将代码交给LLVM来优化并生成机器码。下面深入探讨一下这个过程以及如何生成最快的Rust代码！什么是LLVM？LLV]]></description><author>Rust技术前沿</author><pubDate>Mon, 14 Apr 2025 17:07:00 +0800</pubDate></item><item><title>从238秒到25.9秒：Rust项目Docker构建速度革命</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484640&amp;idx=1&amp;sn=fc090970cc41e7ab4a7fd0d8b311ad95&amp;chksm=c2bb65c51b28faa48500cb83bbfe9400d9dbdb5f7f00c60db4274329e66a98f016437fb45ac5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[优化背景重写的部分由一名队友使用Rust编写，但其在Docker中的构建时间非常长，达到了238秒，相比之下，其余用TypeScript编写的部分仅需10秒甚至更少的时间来启动和构建。显然，这种长时间]]></description><author>Rust技术前沿</author><pubDate>Sun, 13 Apr 2025 17:08:00 +0800</pubDate></item><item><title>Rust编程之道：如何通过消除非法状态提升代码健壮性？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484639&amp;idx=1&amp;sn=5b11ace7932d2c73a8f38787f106fedf&amp;chksm=c21342b414c3cbfdc181bf49d573f2da52fe5519ecd6dfa763424deded0b3a8174cb71ca0110&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[如果你从事Rust编程有一段时间了，肯定听过“消除非法状态”的说法。这通常是人们在称赞Rust类型系统时会提到的一句话。但这句话究竟意味着什么？又该如何将其应用到自己的代码中呢？假设正在编写一个管理用]]></description><author>Rust技术前沿</author><pubDate>Sat, 12 Apr 2025 17:08:00 +0800</pubDate></item><item><title>Rust - 线程间共享数据</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484638&amp;idx=1&amp;sn=5a7162ab90a5a922465a8c9580d7a715&amp;chksm=c2e14b56389d6e5ba3092b64c06a599b49a95f767850f3fc912e905b23c3c9a0cfb2fc709887&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust - 线程间共享数据既然我们能够向线程发送消息，接下来探讨一下如何从这些线程中访问共享数据。这并非最佳的设计选择，因为共享数据需要通过锁来保护，以确保它们能以原子方式被访问，而涉及此数据的各种]]></description><author>Rust技术前沿</author><pubDate>Fri, 11 Apr 2025 17:09:00 +0800</pubDate></item><item><title>Rust与Postgres联手：打造无冗余代码的高效后端API</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484637&amp;idx=1&amp;sn=ff370b07e2a77a55143caf8385daa3fd&amp;chksm=c24e4ffc15ac2c7e3bcd66ba57fb2cc4382a8f0869228666b1e6bc1c58a44ae7a3f2cfd74820&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引入Galileo AILogRocket的Galileo AI能够监控每一个会话，揭示用户遇到的关键问题和行为模式。项目需求在深入编码之前，明确我们要构建的内容以及完成演示所需的基本要求和假设是必要]]></description><author>Rust技术前沿</author><pubDate>Thu, 10 Apr 2025 17:09:00 +0800</pubDate></item><item><title>Rust与Nim对决：谁是下一代编程王者？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484636&amp;idx=1&amp;sn=9c9ec3d9c7f146c42e11b5b930071f6e&amp;chksm=c240c254f4ab605563d30d1b1880c701900ba9842992389bc094ac7fc17ef526b42b5b1bcd27&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[介绍 Galileo AILogRocket 的 Galileo AI 能够监控每一个会话，揭示出重要的用户体验难题和关键行为模式。比较编程语言在技术生态系统中并非新鲜话题。开发者们不断评估语言、框架]]></description><author>Rust技术前沿</author><pubDate>Wed, 09 Apr 2025 17:13:00 +0800</pubDate></item><item><title>Rust与gRPC：构建未来高效微服务的终极指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484635&amp;idx=1&amp;sn=624a8ae92f2cc2dd6b43a54bebd94b3f&amp;chksm=c2b44e3d02db47b5a18558611b5f467661ace900b523fb1e2d5130f1a7e310c0de11ca22ce37&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[介绍Galileo AILogRocket的Galileo AI监控每个会话，揭示重要的用户困难和关键行为模式。gRPC是由Google开发的一款开源远程过程调用系统。它使得数据中心内外的数据传输变得]]></description><author>Rust技术前沿</author><pubDate>Tue, 08 Apr 2025 17:12:00 +0800</pubDate></item><item><title>超越Go模板：用Rust构建高效动态网页的秘密武器</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484606&amp;idx=1&amp;sn=019239eab85ca591a7d7202a251a5125&amp;chksm=c296184a14ddea676dd836a21d58f56a527c68c17e8b9488d25ce778c4fb7858e8e07d70de3e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[技术栈对于那些习惯使用带有大型标准库的语言（比如Go）的人来说，需要了解的是Rust的标准库较为轻量，它更倾向于提供一个精简的核心库以及顶级的包管理工具。至于像Web服务器或模板渲染这样的功能，则依赖]]></description><author>Rust技术前沿</author><pubDate>Mon, 07 Apr 2025 17:08:00 +0800</pubDate></item><item><title>构建高效Rust应用：不容错过的11款数据库驱动和ORM工具</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484605&amp;idx=1&amp;sn=04c8e6e7ca28a527a4157ef1a131a32f&amp;chksm=c27c27970c045333e33db152c86c1a323b97a56e1203e1ebbb9b572fc6bacdcaaee97831b62f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[适用于生产环境的11款数据库驱动和ORM工具推荐Galileo AI介绍LogRocket的Galileo AI能够观察每一个会话，揭示用户的重要挣扎点和关键行为模式。无需赘述，Rust因其支持所有主]]></description><author>Rust技术前沿</author><pubDate>Sat, 05 Apr 2025 17:09:00 +0800</pubDate></item><item><title>超越标准库：利用Cargo新特性构建独立于操作系统的Rust应用</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484604&amp;idx=1&amp;sn=7df1e02f330136ca536e5aae80b85e02&amp;chksm=c29758ac05096435f7bbcca7eb271bedf2586b1b20cf019b1b9327b9aae875413719ead75550&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[简介Rust语言为x86架构创建一个最小的64位操作系统内核，并构建一个可引导的磁盘镜像，该镜像能够在屏幕上打印信息。引导过程当你开启电脑时，它开始执行存储在主板上的固件代码。这段代码会执行硬件自检和]]></description><author>Rust技术前沿</author><pubDate>Fri, 04 Apr 2025 17:07:00 +0800</pubDate></item><item><title>高效能低消耗：Rust如何助力AWS削减50%云成本？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484603&amp;idx=1&amp;sn=76b817444d020c96165859f605a23db9&amp;chksm=c2915e6cbc6c41b570da4fe52dbba8ce81ee1aa4f6de6d15eddfa533a09b977df13a70ed2449&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[近年来，Rust语言的兴趣激增，微软、谷歌和亚马逊等科技巨头纷纷分享了他们使用Rust构建关键系统的心得体验。尽管如此，关于Rust的讨论大多仍由那些没有在大规模生产环境中应用Rust，或者仅将其用于]]></description><author>Rust技术前沿</author><pubDate>Thu, 03 Apr 2025 17:09:00 +0800</pubDate></item><item><title>Rust与Rocket框架构建Web应用</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484602&amp;idx=1&amp;sn=5b57dfb0111e59f75e69d44e8d08af09&amp;chksm=c21501a0a70f74b1f6c7551af6ec6e20518f6af9f85a963fbad84cfb5073073119632e4a3ec7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust与Rocket框架构建Web应用随着越来越多的开发者选择Rust来开发高效且可靠的应用程序，它逐渐成为了构建快速、安全Web应用的理想语言。特别是通过像Rocket这样的Web框架，Rust让]]></description><author>Rust技术前沿</author><pubDate>Wed, 02 Apr 2025 17:11:00 +0800</pubDate></item><item><title>Zed vs VS Code：开源Rust编辑器能否颠覆编程界？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484601&amp;idx=1&amp;sn=80ab48e8079c26f2f5b68b40210a128f&amp;chksm=c2481c0405e1ad901d54ad4110d54fda09c79f506da208a2a13f9747c7503e6bd45aa7f6cce8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本文将深入探讨Zed代码编辑器的具体功能、提供的特性及其协作能力，并将其与VS Code进行对比，看看这两款编辑器各有哪些优缺点。介绍LogRocket的Galileo AI，它能够监控每一次会话，揭]]></description><author>Rust技术前沿</author><pubDate>Tue, 01 Apr 2025 17:11:00 +0800</pubDate></item><item><title>TensorFlow在Rust中的使用指南</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484600&amp;idx=1&amp;sn=eb2166ab7f3fb96fa3a81bad0a56325c&amp;chksm=c2366144e6fe27e3f50651bbee2d500fbf91af614ac352e0a9a2b6df669a4b8c1770de1c0c63&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[TensorFlow在Rust中的使用指南在本篇文章中，将探讨TensorFlow和Rust的结合，深入研究如何集成这两种技术以发挥各自的优势。设置TensorFlow模板所有讨论到的代码都可以在仓库]]></description><author>Rust技术前沿</author><pubDate>Mon, 31 Mar 2025 17:11:00 +0800</pubDate></item><item><title>异步Rust：超越性能，掌控计算流程的艺术</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484599&amp;idx=1&amp;sn=8aa6207b063b380eb0160d8d4a0fdf21&amp;chksm=c22c50062ef0716e1dc101abeeee7be5d013826940e1cdc3badaa30e2a4d93352cba40623a79&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[异步Rust提供的不仅仅是性能上的优势。它为开发者提供了一些非异步Rust不具备的功能。语言层次经常有人把Rust和其他语言形容为“N种语言藏在一个风衣里”。Rust自带控制流结构、宏元语言、特性系统]]></description><author>Rust技术前沿</author><pubDate>Sun, 30 Mar 2025 17:07:00 +0800</pubDate></item><item><title>Rust表达式：重构代码的隐形魔法</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484562&amp;idx=1&amp;sn=d1bf97ee2c71b3a31bc0f2584e81b028&amp;chksm=c2ce3fc9b8a57ecbc6d5c299437b103d028d1860ba51d9ab7571685066fbbeedd8fe4735b6ff&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 对表达式的重视是这门语言中一个被低估的特性。一旦将表达式作为Rust的核心机制来接受，编写代码就会感觉更加自然。可以说，表达式影响了对控制流的整体思考方式。“一切皆表达式”虽然有些夸张，但在]]></description><author>Rust技术前沿</author><pubDate>Sat, 29 Mar 2025 17:09:00 +0800</pubDate></item><item><title>Rust登陆Linux内核：6.1版开启新时代的微妙变革</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484561&amp;idx=1&amp;sn=9d2d6b4ac375b14a4f8fa6e530ba2b94&amp;chksm=c2fd44bb11873ad240f2544e30f02649fb36b5be9b3a2eae303e170b70c5ef1b86038c418b4c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引入Rust的重要性在于它为Linux内核带来了新的可能性。尽管6.1版本的内核在实际生产环境中不会运行任何Rust代码，但这一步却赋予了内核开发者一个宝贵的契机，让他们可以在内核上下文中摸索Rust]]></description><author>Rust技术前沿</author><pubDate>Fri, 28 Mar 2025 17:06:00 +0800</pubDate></item><item><title>自动化、分布式系统与存储：Rust标准库文件操作比Python慢</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484560&amp;idx=1&amp;sn=efcca6c4aba914298826ad30f1b3c56c&amp;chksm=c2d1af8ffbfa5f8745b75206b651f0ffb3be60f0ce92c425c44de56c15ec9c91c8f570448e4f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[自动化、分布式系统与存储：Rust标准库文件操作比Python慢？其实是硬件问题！接下来，将分享一段饶有趣味的技术旅程，这段旅程从op.read()开始，最终揭示了一个意想不到的结局。简要概述Open]]></description><author>Rust技术前沿</author><pubDate>Thu, 27 Mar 2025 17:08:00 +0800</pubDate></item><item><title>即时模式GUI的魅力：为什么选择egui进行Rust开发？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484558&amp;idx=1&amp;sn=694c4c5508bc4162ffb85b2af9f3e35b&amp;chksm=c2dcfba8151283adece9265cca215d25e960052d122e2409877fab6fbe628f1cabd136cb760a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是egui？在本篇尝试egui的文章中，我们将探索egui的定义、使用原因及方法，并通过构建一个西斯特西安钟来展示其实用性。西斯特西安钟采用了一种比现代阿拉伯数字更为古老的数字表示形式。egui]]></description><author>Rust技术前沿</author><pubDate>Wed, 26 Mar 2025 17:11:00 +0800</pubDate></item><item><title>掌握Rust性能：剖析、基准测试与持续改进的策略</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484557&amp;idx=1&amp;sn=67b9e57e00acd22af5b9a1ec2fabb9c7&amp;chksm=c278b6745bd536001ba811be064b127dbbbc482c8454cf79fb39c800a9814047e5ebf8c5b2bd&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[性能调优是选择Rust进行开发的重要理由之一。事实上，rust-lang.org首页上列出的第一个优势就是性能，甚至排在内存安全之前。这并非空穴来风——许多基准测试表明，用Rust编写的软件速度非常快]]></description><author>Rust技术前沿</author><pubDate>Tue, 25 Mar 2025 17:07:00 +0800</pubDate></item><item><title>Rust 内存安全解析</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484556&amp;idx=1&amp;sn=4c45779eb28b880e8f1f19a7fb94c62c&amp;chksm=c2a92dbbb019bfe7ecadf5944a1dd85c8b1f9235d3647be3892f8b4db1ff349d00ae230f542d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 内存安全解析语言特性保障内存安全在过去十年间，Rust 成为了那些希望编写快速且内存安全的原生机器软件的人们的首选。虽然像 C 这样的语言可以在接近硬件层面高效运行，但它们缺乏确保程序内存正]]></description><author>Rust技术前沿</author><pubDate>Mon, 24 Mar 2025 17:11:00 +0800</pubDate></item><item><title>在Rust中构建交互式终端用户界面（TUI）</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484555&amp;idx=1&amp;sn=1f548a99860ea454d3974bb43f7bc6a2&amp;chksm=c23342f51884917d29f237f32ac7f9832e4c73e82964008dd6b4e5e91a6ac0e4da4e8fc4e277&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[创建交互式的终端用户界面，让命令行应用程序焕发出新的活力。截至2024年11月25日13:13:17（UTC/GMT +8小时），Rust TUI技术已经相当成熟。Rust TUI：构建基于终端的用户]]></description><author>Rust技术前沿</author><pubDate>Sun, 23 Mar 2025 17:07:00 +0800</pubDate></item><item><title>如何在 Rust 中编写测试？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484554&amp;idx=1&amp;sn=08041afdea73d23de311bd3cff4a0031&amp;chksm=c2427ff9f7f5a2ad9210f7e97ae9adda7f937e8914bfb0f90352cc4c3b6f2e49ed998b414bbb&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[如何在 Rust 中编写测试？掌握如何在 Rust 中编写高效的测试，确保代码既坚固又无误。 本文将带你了解单元测试和集成测试的基础知识，深入探讨 Rust 内置的测试框架，并提供实用的例子。简介Ru]]></description><author>Rust技术前沿</author><pubDate>Sat, 22 Mar 2025 17:09:00 +0800</pubDate></item><item><title>2024年Rust回顾：展望未来</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484536&amp;idx=1&amp;sn=d618cec789920be18961c824443a349f&amp;chksm=c274720238e549a7f31ae34c95182bf3adb468f4d33c2e6c181f3f2eb18b68fb060a801bee1e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[回顾2024年的进展在2024年，Rust项目为这门语言带来了数不胜数的改进。下面将简要回顾其中一些，并探讨可能的发展方向。新增的原始引用类型今年，Rust引入了创建&raw const和&raw m]]></description><author>Rust技术前沿</author><pubDate>Fri, 21 Mar 2025 17:09:00 +0800</pubDate></item><item><title>C++ vs Rust：编译速度对决，谁更胜一筹？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484535&amp;idx=1&amp;sn=83005082ac0026663a173d602d175848&amp;chksm=c2ea8c0df67bbb4b4bf5f8085ea0a84cfec8e5c604194b20b185486ddb21a7da0aa5664a7724&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在编程世界中，“我的代码正在编译”已经成为了一个梗，而C++则是这个笑话中的常客。C++以编译速度慢著称，即便是像Google Chromium这样的大型项目，在新硬件上尚且需要耗费不少时间进行编译，]]></description><author>Rust技术前沿</author><pubDate>Thu, 20 Mar 2025 17:13:00 +0800</pubDate></item><item><title>简化复杂：解析 Rust 异步编程中 Future 特性的核心原理</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484534&amp;idx=1&amp;sn=9100c0ef699047ded1ab89a95d8d55a2&amp;chksm=c2900be7126fa503463bb33e38c0d943f24f32e31c003097b12d27ac4165068a2b34e4741ac5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在 Rust 中，异步系统正逐渐成熟。如果应用程序对输入输出操作（IO）要求较高，只需要简单地“使用异步”就能实现高效的运行。Rust 的异步函数实际上是对常规函数的语法糖，它们并不会直接返回值，而是]]></description><author>Rust技术前沿</author><pubDate>Wed, 19 Mar 2025 17:11:00 +0800</pubDate></item><item><title>当银行账户遇上多线程：Rust 解锁安全编程新范式</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484533&amp;idx=1&amp;sn=4b2941061a229c1edd9c32d18556a030&amp;chksm=c23835b74b4aaf658a028b3cdfe96ba9d7e5f23585ed4cb4205ba47f42cb0ed4882191b38ebc&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在保证线程不安全的情况下安全地编写代码 一个被低估的 Rust 特性Rust 的一大亮点在于它简化了正确编写并发程序的过程——以至于有时候 Rust 的口号是“无畏的并发”。然而，今天要探讨的是 Ru]]></description><author>Rust技术前沿</author><pubDate>Tue, 18 Mar 2025 17:09:00 +0800</pubDate></item><item><title>Rust vs Java：为何Optional模式在Rust中更胜一筹？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484532&amp;idx=1&amp;sn=5d298706990f256c7c8a86c378960b0b&amp;chksm=c2a71219a3fcff9737fee579f200753016239a01b3dc3321fa76f1d1625bbb81724dc4206083&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在编程世界里，像Java或Scala这样的语言提供了多种方式来表达“无值”的概念。传统上，一个特殊的null值被用来表示不引用任何实际值的引用。但随着时间推移，人们意识到使用null容易出错，可能引发]]></description><author>Rust技术前沿</author><pubDate>Mon, 17 Mar 2025 17:11:00 +0800</pubDate></item><item><title>深入理解 Rust 借用检查器</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484531&amp;idx=1&amp;sn=2a624fa8d2b34034517f959126ae5279&amp;chksm=c2e949ddd7fc27cd272a537581e9fcfb53d36054cb1ef63b59e32034f0fe22512c2d931afd15&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是借用检查器？借用检查器是Rust语言的核心特性之一，它确保了在无需垃圾回收器的情况下，程序能够提供内存安全的保证。为了更好地理解这一点，我们先来探讨一下所有权、借用检查器以及垃圾回收器之间的关系]]></description><author>Rust技术前沿</author><pubDate>Sun, 16 Mar 2025 17:08:00 +0800</pubDate></item><item><title>实用Rust - 使用egui进行桌面GUI开发</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484530&amp;idx=1&amp;sn=6ac2e2fbc0bdc2cb338debb0d8b38ad8&amp;chksm=c22a0664564db641df096c98b568318da6c1cf16603ce075e597c35a55f9d5fab8a7566a4646&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[实用Rust - 使用egui进行桌面GUI开发挑战与解决方案跨平台应用的GUI开发一直是任何编程语言中的重大挑战。从MacOS到Windows，再到各种Linux桌面环境以及移动和Web端，要找到一]]></description><author>Rust技术前沿</author><pubDate>Sat, 15 Mar 2025 17:11:00 +0800</pubDate></item><item><title>defmt：一款专为嵌入式设备设计的高效Rust日志框架</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484488&amp;idx=1&amp;sn=57ef50098768bd92db848849d129a6ef&amp;chksm=c29cab0d0955cf8f20861324ee16deeb7783dbefff432d51776b107e0c4eaa9588931a143009&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[defmt：一款专为嵌入式设备设计的高效Rust日志框架设置环境为了简化设置过程，我们创建了一系列指导步骤。请注意，最新的设置指南可以在官方文档中找到，以下步骤保留在此仅供存档目的，可能会过时。安装最]]></description><author>Rust技术前沿</author><pubDate>Fri, 14 Mar 2025 17:09:00 +0800</pubDate></item><item><title>在Rust中构建简易查询系统</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484487&amp;idx=1&amp;sn=02eb3b91a861170b73b3e0d5985b43b3&amp;chksm=c2e90df529a7dd3004d6e854cb4f56dc05c782b9c22f92576323913f4ef1ee3542849dc186f7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust中构建简易查询系统所谓查询系统指的是什么？这里所说的查询系统是一种模式，用于请求和计算程序中的数据，按需进行。这种模式下，数据并不需要在程序启动时预先计算，而是在真正需要的时候才被处理。接下]]></description><author>Rust技术前沿</author><pubDate>Thu, 13 Mar 2025 17:09:00 +0800</pubDate></item><item><title>Rust中最微妙的语法</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484486&amp;idx=1&amp;sn=1869054c5a7594117f285aa65a72da78&amp;chksm=c2eb7a7f7cb2840b55c1503c1a4ed94ceef7c87c4b46d03e56d38ccb492ecb66baa3026e1ef0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust中最微妙的语法。嘿，想写出让人困惑的Rust代码吗？有办法！先来聊聊let和const吧。let声明变量。形式为let PAT = EXPR;，这看似简单，但其实功能强大。比如let (a,]]></description><author>Rust技术前沿</author><pubDate>Wed, 12 Mar 2025 17:07:00 +0800</pubDate></item><item><title>Rust GPU维护者</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484483&amp;idx=1&amp;sn=63d791c6672d1d54a68d82529001bfa5&amp;chksm=c2b08875475e1737557895653d83b8db32c0a65701008adb3672fbb500bc524b29a685205299&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust GPU维护者什么是Rust GPU？Rust GPU是一个允许用Rust语言为图形处理单元（GPU）编程的项目。通常情况下，GPU是通过专门的语言如CUDA、OpenCL、HLSL或GLSL]]></description><author>Rust技术前沿</author><pubDate>Tue, 11 Mar 2025 17:11:00 +0800</pubDate></item><item><title>从初代iPhone到Rust：探索编程语言的成长瓶颈</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484482&amp;idx=1&amp;sn=702eb7a9c97a2afde90e98b167028535&amp;chksm=c219455ccda8939d4f0f9079faff0825523b78f8b08773634af305c5a2e1f81a9edeaffb167e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust编程语言给人一种初代产品的感觉。这让人联想到初代iPhone——他们围绕多点触控构建了一整套操作系统，推出了没有实体键盘的智能手机，以及一个功能齐全的浏览器。几个月后，我们意识到iPhone真]]></description><author>Rust技术前沿</author><pubDate>Mon, 10 Mar 2025 17:07:00 +0800</pubDate></item><item><title>从C到Rust：探索嵌入式固件开发的未来趋势</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484480&amp;idx=1&amp;sn=49d039a69395038abec55cc194b90d30&amp;chksm=c26231df53722dca14c941fe48f6e4e937a4d105355554ea4a492010d760f886ffbe6a6212c9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[使用Rust编写嵌入式固件在当今的电子世界里，微控制器（MCU）无处不在。这些硬件和软件结合的装置被称为嵌入式设备，其软件通常用C或C++编程。而Rust作为一种现代语言，最近成为了一个可行的替代方案]]></description><author>Rust技术前沿</author><pubDate>Sun, 09 Mar 2025 17:13:00 +0800</pubDate></item><item><title>Python vs Rust vs JavaScript，不同的应用场景</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484478&amp;idx=1&amp;sn=cd57efcfe884e52a491f0bb5acd9f31c&amp;chksm=c2ff7dbf8134fd0f70f62142ca0ffe6a73f2d0154a59f8eb286beb5911e1748ec09fdef67374&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust对比其他编程语言：有何独到之处？在技术领域，各类编程语言的迅速涌现可能会影响到构建软件产品时的选择。尽管如此，有些编程语言仍然脱颖而出，Rust便是其中之一。Rust作为一种系统级语言，旨在解]]></description><author>Rust技术前沿</author><pubDate>Sat, 08 Mar 2025 17:07:00 +0800</pubDate></item><item><title>揭秘Rust字符串：为何它既复杂又迷人？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484447&amp;idx=1&amp;sn=e351251d1814de642faf578172232960&amp;chksm=c2ab94a4611be73b1a6c38d4c8ae6d1e322766d3d0341a06c1064f41dde8c76822cde4d016e4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[最近，越来越多的开发者在尝试接触Rust时，遇到了一个共同的难题——字符串（&str, String 及它们之间的关系）的操作。对于那些习惯了其他语言中字符串处理的人来说，这无疑是一个不小的挑战。在大]]></description><author>Rust技术前沿</author><pubDate>Fri, 07 Mar 2025 17:08:00 +0800</pubDate></item><item><title>从零构建多线程Web服务器——Rust语言的实践</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484446&amp;idx=1&amp;sn=e663af639b569eed8862c53dcefcacf8&amp;chksm=c21916f1579f152822e08ea721b490f41817f69b845f8d5f1eb9de7148b7d89f8fd035f77d47&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[从零构建多线程Web服务器——Rust语言的实践引言亲手搭建一个Web服务器是深入了解Rust并发特性的绝佳途径，而Rust对性能和安全性的重视使其成为系统编程的理想选择。本文将引导大家创建一个简易的]]></description><author>Rust技术前沿</author><pubDate>Thu, 06 Mar 2025 17:12:00 +0800</pubDate></item><item><title>减小Rust二进制文件大小的步骤</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484445&amp;idx=1&amp;sn=0c42cb122eb292ade1cd6079c77e0cf4&amp;chksm=c2b8d17f0682ea87a1f456c3e0f5462e7683861f038ad2baa7e137648b4eb0620b7d5bbad037&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[要将一个x86_64 Linux平台上的Rust二进制文件的大小缩减到极致，可以采取一系列措施。从默认的3.6 MiB开始，通过去除符号信息、避免使用Rust标准库并直接调用libc、以至进一步替换l]]></description><author>Rust技术前沿</author><pubDate>Wed, 05 Mar 2025 17:09:00 +0800</pubDate></item><item><title>Rust为何备受青睐？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484444&amp;idx=1&amp;sn=9e3d5e13d3810afcb85f788d198729c0&amp;chksm=c2ae7744ee57fcc0d48e5ff6a9e0121442c4931bd6675d056602e5a7079bfa1a1c2021934251&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust编程语言是否真的名副其实？这股热潮是昙花一现还是持续繁荣？随着Rust在系统编程领域的崭露头角，它因为安全性、性能和并发支持的独特组合而在近年来获得了显著的关注。如果你正在考虑下一个项目的技术]]></description><author>Rust技术前沿</author><pubDate>Tue, 04 Mar 2025 17:09:00 +0800</pubDate></item><item><title>提升 Rust 工作流—— Miri</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484443&amp;idx=1&amp;sn=f9002029c2b885bbae2ce6172a0d8790&amp;chksm=c27340429db0de393c0cf0983ed688699ee0201d04a9fdff759361c790d0dea0cb0fbfa4f5c9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[提升 Rust 工作流：借助 Miri 和其他工具接下来，深入探讨本期的特色文章——Miri，即 Rust 解释器，看看它是如何帮助发现代码中的未定义行为。深入理解 Miri: Rust 开发者不可或]]></description><author>Rust技术前沿</author><pubDate>Mon, 03 Mar 2025 17:12:00 +0800</pubDate></item><item><title>C++ VS Rust：RAII对比分析</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484442&amp;idx=1&amp;sn=6f7f1420917aaa2263bb55e9966e1f6d&amp;chksm=c24afe4eda9739b5e0a9cfa479cc1c1935b9e8ddacdd85cb681376e65c0206c685a04c190be5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[本文较长，请耐心看完。不必认为对C++持有偏见。若无C++的贡献，Rust不可能有今天的成就。正如所有新技术和科学一样，Rust是在巨人的肩膀上建立起来的，而这些巨人中的许多都为C++做出了贡献。这道]]></description><author>Rust技术前沿</author><pubDate>Sun, 02 Mar 2025 17:08:00 +0800</pubDate></item><item><title>Rust序列化性能革命：2.25倍加速的秘密</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484420&amp;idx=1&amp;sn=577a4a6f32c114e2c06a29152e60e7d1&amp;chksm=c2adffe7fb33882990b0a6d0bb4487bf5eed6f75172c0f2ddab4226f57348b5cee3d9c4bbd03&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在当今科技界，尽管JSON这种效率较低的纯文本格式仍然被广泛用于互联网上的数据传输，但我们不得不承认，业界在序列化和反序列化JSON上浪费了大量资源。不过，我们至少可以努力让这些操作尽可能高效！在这篇]]></description><author>Rust技术前沿</author><pubDate>Sat, 01 Mar 2025 17:11:00 +0800</pubDate></item><item><title>如何使用 Rust 构建博客网站</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484419&amp;idx=1&amp;sn=7c778b63fcf95c4f35972d614dfd6bb6&amp;chksm=c23ce95b591c77daac553385daada22cb0f28c0ee72e1668c0d11e7430362fdad3d63935d128&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[开始行动要开始用Rust构建新的博客，你需要先确保系统上安装了Rust，然后运行 cargo new awesome-blog 创建项目。进入新创建的目录 cd awesome-blog，打开 Car]]></description><author>Rust技术前沿</author><pubDate>Fri, 28 Feb 2025 17:13:00 +0800</pubDate></item><item><title>单次遍历递归在 Rust 中的应用</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484418&amp;idx=1&amp;sn=2f7d693909bb2e19641ac95d52b9bcc9&amp;chksm=c2d57d947c881784dbb37334494f9ac78be3c407f6113aa814b159beebac33166858587027b0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[单次遍历递归在 Rust 中的应用在这篇文章中，我们将探讨如何将这两个操作结合起来——即同时进行结构的展开和折叠，在一次遍历中完成这两项操作。通过这种方式，我们可以编写任意递归函数来处理传统的盒指针递]]></description><author>Rust技术前沿</author><pubDate>Thu, 27 Feb 2025 17:11:00 +0800</pubDate></item><item><title>Rust在机器学习中的独特优势</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484417&amp;idx=1&amp;sn=caf17c185ade4c16752308457fcdf73f&amp;chksm=c2f0aa5cf737e7a39fb92b495ef470f29738d8c823d6cfbfbe1fe46588efd8add5e1848f386f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[机器学习：改变行业的力量机器学习（ML）正如同一股清流，在医疗、金融、制造业和技术领域掀起了一场变革风暴。从图像识别到自然语言处理，再到推荐系统，这些应用已经成为了现代科技不可或缺的一部分。随着算法对]]></description><author>Rust技术前沿</author><pubDate>Wed, 26 Feb 2025 17:18:00 +0800</pubDate></item><item><title>令人敬畏的rust框架和库</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484374&amp;idx=1&amp;sn=b25edf8a8fce9b197693699554af104e&amp;chksm=c211d232b46fa885299d2f1028f0dfab548fa00c845ae4493d13b7b67bb86b6bb2704222d19d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[随着Rust编程语言在开发者社区中的日益流行，这门专注于性能、安全性和并发性的语言，以及其丰富的库生态系统，吸引了越来越多的支持者。本文将为读者提供一份关于一些值得关注的Rust库的简要概述，这些库的]]></description><author>Rust技术前沿</author><pubDate>Tue, 25 Feb 2025 17:12:00 +0800</pubDate></item><item><title>在Rust中使用德式字符串</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484359&amp;idx=1&amp;sn=021a4bdcdd634788ee6a75987449afb0&amp;chksm=c2318dab846bd5b41eff1790b475d974c48832eaa8281003355ca811eb8b44cc20e9c498850a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[优化无法在Rust中实现？事实并非如此！一篇文章中提到的一个观点： 这种字符串实现还允许进行极为重要的“短字符串优化”：如果字符串足够短，则可以直接“就地”存储，即设置容量字段中的特定位，其余容量、大]]></description><author>Rust技术前沿</author><pubDate>Mon, 24 Feb 2025 17:11:00 +0800</pubDate></item><item><title>Rust 的边界检查究竟有多大的开销？</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484358&amp;idx=1&amp;sn=68f29d01cf1260e839e7ddc04f2cb89b&amp;chksm=c27a9208ab3a72a3b267a5665aca5b8b392209d4bf0aaa759781e5bcf5eb6ff944417520993a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 的边界检查究竟有多大的开销？最近，OpenSSL 项目中曝出了一对漏洞。不出所料，这两个漏洞的根本原因都是缓冲区溢出，攻击者可以通过恶意负载触发这些问题，导致系统崩溃和拒绝服务。自然而然地，]]></description><author>Rust技术前沿</author><pubDate>Sun, 23 Feb 2025 17:02:00 +0800</pubDate></item><item><title>Rust中如何编写字符串驻留器</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484357&amp;idx=1&amp;sn=3fbeccb6d7894c9d07776aea4e6886a4&amp;chksm=c202335d3d113014e73ccfc87542e212e93e0ace4ff7929c975b77cfa828a13b6ef66b2a4402&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一篇文章介绍了在Rust中编写字符串驻留器（Interner）的一种简洁技术，这种技术此前未曾被记录过。字符串驻留是处理大量重复字符串时的经典优化手段，比如在一个编译器中，程序中的大多数标识符会多次出]]></description><author>Rust技术前沿</author><pubDate>Sat, 22 Feb 2025 17:13:00 +0800</pubDate></item><item><title>如何编写快速的Rust代码</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484343&amp;idx=1&amp;sn=1b23dcd16ead2fe367997640652d1249&amp;chksm=c2874647ec89568dfea59786d484da568e6003da3c4aed935f9dea5205ccc11130dcfdfcf112&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[如何编写快速的Rust代码 对于Rust新手来说，我们最终优化了代码库，使其超越了Java和Common Lisp实现。现在，让我们聚焦于Rust以及Rust程序员可以采取哪些措施来提升代码的速度。快]]></description><author>Rust技术前沿</author><pubDate>Fri, 21 Feb 2025 17:40:49 +0800</pubDate></item><item><title>Rust并行编程新高度：如何巧妙利用Rayon实现高效任务调度</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484339&amp;idx=1&amp;sn=59fd879cc2f97718e232c2555774ba70&amp;chksm=c236218cc32dddeb98500f94f964f82c55312dc7342e902ef152cad47cc38b2b61fe32ae32f5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在编程、优化和性能分析的博客中，曾经讨论过如何并行处理文件数据可能根据工作负载和设备能力的不同，对性能产生正面或负面的影响。当涉及到复杂程序时，这些程序混合了不同类型的任务，并使用不同的物理资源，如C]]></description><author>Rust技术前沿</author><pubDate>Thu, 20 Feb 2025 17:18:00 +0800</pubDate></item><item><title>解读 unwrap 的使用</title><link>http://mp.weixin.qq.com/s?__biz=Mzk0Njg2NTg2OA==&amp;mid=2247484335&amp;idx=1&amp;sn=af0652f3b79690b20f475fc02280718c&amp;chksm=c2f176711bd02871f7a3babbdacf05af12b12d64df4cdc178c6f174a4cd4107ccdb632b63189&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[解读 unwrap 的使用在 Rust 编程中，unwrap 方法可能会让初学者感到困惑。以下是一些建议：可以使用 expect(&str) 而不是 unwrap() 来提供更具体的错误信息。将 un]]></description><author>Rust技术前沿</author><pubDate>Wed, 19 Feb 2025 17:18:00 +0800</pubDate></item></channel></rss>