<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>everystep</title><link>https://wxrss.reinject.top/81097369b716a0e1e1ae3c654900d8ae/</link><description>An RSS feed.</description><language>zh-cn</language><lastBuildDate>Sun, 26 Oct 2025 03:32:53 +0800</lastBuildDate><generator>wxrss -- https://github.com/0xlane/wxrss</generator><item><title>回到1995：我用奔腾133和一堆文件夹，写代码的那些年</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497050&amp;idx=1&amp;sn=acf65c32267773323d4a89eac1644ad5&amp;chksm=a76b6c4e53b2370ff465fefb996d9ec0e9ffac78dbbe650c5617565dcea6b5429e8b7b427e5b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[想象一下这个画面：凌晨 3 点，你坐在一台奔腾 133 的电脑前，盯着屏幕上密密麻麻的文件夹——项目_最终版、项目_最终版2、项目_真正的最终版、项目_这次是真的最终版_我发誓……你深吸一口气，准备打]]></description><author>everystep</author><pubDate>Fri, 10 Oct 2025 22:04:27 +0800</pubDate></item><item><title>从零实现 Git，面试降维打击</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497041&amp;idx=1&amp;sn=73729e18a6edc12925f1badf76b07c94&amp;chksm=a7d6bd98c3647322313b29b83f929719d7d92ea18f988ffc23ec4ac346bd07875d80ccdd6baa&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[简历上写“精通 Git”，你真的“精通”吗？你每天用 git pull、git push、git commit，命令敲得飞起，感觉自己早已驾轻就熟。但午夜梦回，你是否也曾被这些场景惊出一身冷汗：面试官]]></description><author>everystep</author><pubDate>Mon, 06 Oct 2025 22:55:29 +0800</pubDate></item><item><title>解耦神器！深入解析“责任链模式”，让你的模块像乐高一样自由插拔</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497035&amp;idx=1&amp;sn=2c59b4b307f5d21ceea38d43a727efe4&amp;chksm=a7c3cb1f1b4adf12cc45a3ed1e8d4565979f3d22008a4c171f79d638d11f6a18623e0e023e0d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你有没有过这样的经历？新买的笔记本电脑出了点问题，你兴冲冲地跑到客服中心，结果发现解决一个问题，简直像在“闯关”。**前台接待 (L1)**：你先找到前台小姐姐，她会帮你解决一些“重启试试”、“是不是]]></description><author>everystep</author><pubDate>Thu, 18 Sep 2025 23:49:13 +0800</pubDate></item><item><title>告别“复制粘贴”：用模板方法模式，优雅地为流程“立规矩”</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497028&amp;idx=1&amp;sn=7b1a91ed4a90a02f2166c9ca783bd520&amp;chksm=a7009eca54133c4affb81ced2597ab011838f59d60f07abef00abee114ccd04b233d9ec0b930&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你有没想过，为什么麦当劳的巨无霸，无论你在哪个城市吃，味道都一模一样？而你妈（或者你）做的红烧肉，每次味道都飘忽不定？秘密就在于一套雷打不动的“标准作业流程”（SOP）。在软件世界里，这套 SOP 就]]></description><author>everystep</author><pubDate>Sun, 14 Sep 2025 18:32:27 +0800</pubDate></item><item><title>最近学了个新招，让我的 if-else 清爽了不少</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497017&amp;idx=1&amp;sn=2e9259176a6163fe962b62456910559f&amp;chksm=a7d8fba0665fd5a62d31d7964f2c58440af0042b77d4fd7990427c6e9750c541372780f22b41&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[双十一血拼，你终于在购物车里塞满了宝贝，来到了最后的“决战”——支付页面。这时候，屏幕上是不是会跳出一大堆选项，让你眼花缭乱？信用卡大法 💳：输入一长串数字，体验“数字消失”的快感。支付宝/微信扫码]]></description><author>everystep</author><pubDate>Sat, 13 Sep 2025 23:16:51 +0800</pubDate></item><item><title>再探 C++ 构造函数：我们真的了解对象的“第一声啼哭”吗？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497009&amp;idx=1&amp;sn=084dd021852588ec1e3babaf6675d681&amp;chksm=a75da9931f8e298b4cd5fed19a4d6c49eb3290017f225cd555e1bb65b657673d12d09bc658e3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[上一回，我们围观了 struct 这个只会装钱的“憨憨钱包”，如何进化成 class 这个会自己管钱的“智能银行账户”。我们还学会了用构造函数，在“开户”的一瞬间，就把客户信息安排得明明白白。但你以为]]></description><author>everystep</author><pubDate>Thu, 11 Sep 2025 21:40:04 +0800</pubDate></item><item><title>想彻底看透 class，我们得先回到 C 语言的 struct</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247497003&amp;idx=1&amp;sn=0c71d4a7647ddf24e4c873ad60c827be&amp;chksm=a7c5a2830c69c8d51e61c0231fa1ab60145e3a3d753a49a968337687a78e3ac8771007ee76a7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[欢迎来到 C++ 面向对象编程（OOP）的第一站！🚀 在咱们聊那些“高大上”的封装、继承和多态之前，得先挖挖根儿，搞明白 C++ 最核心的玩意儿——“对象”，到底是怎么来的。忘掉那些让人头疼的游戏角色]]></description><author>everystep</author><pubDate>Wed, 10 Sep 2025 22:35:28 +0800</pubDate></item><item><title>C++ 字符串的“零拷贝”往事：string_view 诞生前的江湖</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496997&amp;idx=1&amp;sn=3e1e430c6cab0f1451e25e741b2f9940&amp;chksm=a7e1b90e6bf71659cbc9fb58701cd3e51ab894156153fc26b98a80662c06cd741dc8494fabf8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[C++17 空降了一位“武林盟主”——std::string_view，一统字符串视图的江湖。它用几乎零成本的“内力”，化解了函数间传递字符串时的昂贵拷贝，让无数 C++ 程序员如释重负，感觉“泰裤辣]]></description><author>everystep</author><pubDate>Tue, 09 Sep 2025 21:52:42 +0800</pubDate></item><item><title>为什么说 std::string 不只是一个“更好用的 char*”？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496992&amp;idx=1&amp;sn=425823a1f506c521ee476803d226465d&amp;chksm=a7832f971eededaa9d121f38cd41f359446286ecec54c1352220d948c9df222eaed965f62240&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[刚从 C 语言 char* 的“刀耕火种”时代爬出来的 C++ 新手，第一次看到 std::string 时，大概都会热泪盈眶，感觉像是“终于活进了文明社会” 😌。这位“管家”实在是太能干了：自动管理]]></description><author>everystep</author><pubDate>Mon, 08 Sep 2025 07:00:00 +0800</pubDate></item><item><title>除了 char* 和 std::string，C++ 程序员还应该了解第三种字符串。</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496983&amp;idx=1&amp;sn=a1056399b380438f57e45d3c84155d44&amp;chksm=a72b2ed9cfe157691d0780189701f1c219c5a4ffaf44d53abf681f1495bf966edbac3507eadc&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[C++ 程序员在面试时，是不是经常被拉着聊 std::string 和 C 风格字符串 (char*) 的爱恨情仇？😅 说实话，这话题的“盘”都快被大家“包浆”了。但真正的高手过招，早就把目光投向了]]></description><author>everystep</author><pubDate>Sun, 07 Sep 2025 13:38:12 +0800</pubDate></item><item><title>C++ Core Guidelines 解读</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496972&amp;idx=1&amp;sn=61e24ba4bbbafab0530a5a8f1dcbf359&amp;chksm=a784218b7beb0f05bc5ddd04f20cb00637da3d004af58ea14857665283f4c701f9e119ec5c0b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[欢迎来到 C++ Core Guidelines 解读专栏！🚀在这个专栏里，我们想用“人话”和看得懂的代码，带你一起深入探索由 C++ 之父 Bjarne Stroustrup 和 Herb Sutt]]></description><author>everystep</author><pubDate>Thu, 04 Sep 2025 22:46:32 +0800</pubDate></item><item><title>explicit：一个被低估的 C++ 防御性编程利器</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496966&amp;idx=1&amp;sn=247ca6f4ed2f432dcab8568e7cb9144b&amp;chksm=a759f6f284d137529471d72a20135623b0951b9b1ca7f25a969614c2a9070fa0edbdfe35cd1a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在 C++ 的世界里，编译器常常像一个“热心肠”的朋友。它总想帮你把事情搞定，有时候甚至会“自作主张”，在你没有明确要求的情况下，偷偷地帮你进行类型转换。这种行为，就是我们常说的**隐式类型转换 (I]]></description><author>everystep</author><pubDate>Sun, 17 Aug 2025 22:44:02 +0800</pubDate></item><item><title>C++17 如何让编译器，帮你检查“空指针”？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496960&amp;idx=1&amp;sn=a1b90fa77aaf9cd572cddfa1efafab4f&amp;chksm=a7e6825a0a50726d9230d209b138578d9832f39528ed3d419ae909e3e1dd9eb88bd6006d9ff3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你的 C++ 代码里，是否也藏着这样的“定时炸弹”？💣一个返回指针的函数，你敢保证每次都检查了 nullptr 吗？一个查找函数，失败时返回 -1，你敢说它永远不会和真实的业务数据 -1 混淆吗？这些]]></description><author>everystep</author><pubDate>Sat, 16 Aug 2025 11:57:36 +0800</pubDate></item><item><title>超越“是否调用构造函数”：new/delete与malloc/free的本质差异与陷阱</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496959&amp;idx=1&amp;sn=4cac08e8fa7f3efd9d68451400df4c02&amp;chksm=a711896202354d9fe616be86a467595367d96fef65e93e162f2b413e32f5971171dd24cd3719&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[朋友，欢迎光临 C++ 这家高级餐厅！在这里，我们不仅仅是填饱肚子（获取内存），我们追求的是精致的用餐体验，每一道菜（对象）从准备到上桌，再到餐后清理，都充满了艺术感。想象一下，你想点一道招牌菜“红烧]]></description><author>everystep</author><pubDate>Thu, 14 Aug 2025 21:39:48 +0800</pubDate></item><item><title>为了重载 +，C++ 之父曾把指针“关进笼子”</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496953&amp;idx=1&amp;sn=02c605fa0888c1ff2d7dfd504e996e48&amp;chksm=a715f53793db3fbba4465f27d223974a85e4455af029bd0888ed1e0ed269073bd616f417cfc2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[把时间拨回 1982 年，Bjarne 正琢磨怎么给 C 语言加点“仙气”。他盯上了最顺眼的筋斗云：要是能让自定义类型也用 +、-、* 耍帅，那写代码不就成念咒了吗？于是，他先拿“三维向量”开刀，打算]]></description><author>everystep</author><pubDate>Wed, 13 Aug 2025 22:48:58 +0800</pubDate></item><item><title>C++17 的这个“口袋”，为什么比 variant 灵活，却又比 void* 靠谱？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496935&amp;idx=1&amp;sn=c06f8f19c441b4e941c2a6199aa9c919&amp;chksm=a7f2dfaf037e968189898478fff5f283ed76181b92e39675d2b092f642ae5807d46a0975c5c5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[写代码时，咱们最喜欢的就是“一个萝卜一个坑”，一个 int 配一个 int，一个 string 配一个 string，清清楚楚，编译器看了都说好。但总有那么些时候，生活会给你点“惊喜” 😵。比如你正在]]></description><author>everystep</author><pubDate>Sat, 09 Aug 2025 22:53:46 +0800</pubDate></item><item><title>聊聊 C++17 的 std::variant：一个更安全的 union</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496927&amp;idx=1&amp;sn=7a05b4405a1b7bebc99d18a9caf3f70d&amp;chksm=a70a8e7ceee9a7278fd14790190a2c4b244e59049bae0edaf5b1f9695dcacd861ffbf183bd0b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你是否也曾被这样一个问题困扰：如何在一个变量里，安全地存放几种完全不同的类型？🤔也许你想起了 C 语言中的老朋友 union，它承诺能做到这一点，但却像一个没有说明书的“盲盒” 🎁。你往里面放了个整数]]></description><author>everystep</author><pubDate>Tue, 05 Aug 2025 23:38:19 +0800</pubDate></item><item><title>它终结了 printf 与 cout 的内战：std::format 的前世今生</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496890&amp;idx=1&amp;sn=a1c8cbf23d4f80199e891b3d092848f1&amp;chksm=a7039983ed6ae4981a2611928d1bfb66f8b91b6e13ad32dc6b9d8865ade1bf1f884005f8fda4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你的 C++ 编程生涯中，一定有那么几个瞬间让你抓狂 🤯：当你小心翼翼地写下 printf("Value: %f", my_double);，结果忘了 my_double 其实是 int，导致程序在客]]></description><author>everystep</author><pubDate>Thu, 31 Jul 2025 22:31:34 +0800</pubDate></item><item><title>别再CV大法了！一个std::span，优雅搞定所有C++数组传参</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496881&amp;idx=1&amp;sn=429284293d42a14fb1a9c96ca756e684&amp;chksm=a7b166e3034aedd5ccb17c5a05f56e61cf792f9b8df066787857035944df95736a1e3ad37945&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你一定经历过这样的“代码噩梦”：你写了一个超棒的函数，能完美处理 std::vector<int>。你的同事看了赞不绝口，然后反手就丢给你一个 C 风格的老式数组 int[]，问：“这个能用吗？” 🥶]]></description><author>everystep</author><pubDate>Wed, 30 Jul 2025 21:05:19 +0800</pubDate></item><item><title>字符串的救赎：从 const string&amp; 到 string_view 的演进史</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496871&amp;idx=1&amp;sn=266cec72868c0322102ab034a5f229b9&amp;chksm=a7d574ff5f41428ac2b4736c8b33e4644f77faf7b38752d23528b96bf2ebb1c0b1c94482cc20&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在 C++ 的编程世界里，字符串处理是一个永恒的话题。几乎每个程序都离不开它，但长久以来，如何高效、优雅地传递和操作字符串，一直困扰着无数开发者。这不仅仅是技术选型的问题，更是一段充满了血泪与智慧的演]]></description><author>everystep</author><pubDate>Tue, 29 Jul 2025 22:19:27 +0800</pubDate></item><item><title>用现代 C++ 从零构建一个 mini-Redis：一个可以真正写进简历的高质量项目</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496853&amp;idx=1&amp;sn=7f1febd2a9cfe02b022c550f10b51a10&amp;chksm=a79441d29af3452fe6c2a76c5d5c5076bcf17514a567e64308efb50d107ead97763e0d8b41db&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你抱着那本比砖头还厚的《C++ Primer》，啃完了上千页的语法，从“RAII”到“右值引用”，从“模板元编程”到 C++23 的新特性，感觉自己无所不能。但一到动真格的时候，瞬间被打回原形：面试官]]></description><author>everystep</author><pubDate>Mon, 28 Jul 2025 22:07:23 +0800</pubDate></item><item><title>从 Boost、Qt 到 C++11，enum class 的诞生，竟是一部血泪史</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496839&amp;idx=1&amp;sn=3140d721dd96ad809cedce7846afcaef&amp;chksm=a7c58d7ee69929484fb721ccd25d3ac6f3c17345a1ad79749a3da2799080a7c659208748d3f8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[如果你写过有些年头的 C++，大概率遇到过这样的场景：你在一个头文件里开心地定义了一组颜色，又在另一个头文件里定义了交通信号灯的状态。// a.henum Color { Red, Green, Bl]]></description><author>everystep</author><pubDate>Sat, 26 Jul 2025 18:18:12 +0800</pubDate></item><item><title>如何从零构建一个最基础的智能指针？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496829&amp;idx=1&amp;sn=ae65a4469851957b03e29603bc8b3978&amp;chksm=a74ed4df1f6f23813b79208378fdffe5625f9373eb04eb2a06884b0a676047dd33b7b11fc66d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[还在被 new 和 delete 折磨？本文带你亲手终结这场噩梦。我们将从零开始，用最精简的代码，打造一个能自动管理内存的C++智能指针。你是否也曾在深夜，被C++的内存管理折磨得痛不欲生？ 那些该死]]></description><author>everystep</author><pubDate>Sun, 15 Jun 2025 20:50:41 +0800</pubDate></item><item><title>别再无脑#include了！你写的每一行C++代码，可能都在拖慢整个团队！</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496619&amp;idx=1&amp;sn=3e4296e4975f65f9a8d3c8d6206a1212&amp;chksm=a7a8273f5d9660a25d6fb7a7e9cfea5e34f081b0d6101307608ed4900ce22760fe21902a123b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你是否曾经因为修改了一个头文件，就不得不重新编译大半个项目，等到天荒地老？😫 是不是也曾被烦人的"循环依赖"搞得焦头烂额？💔如果我告诉你，有一个 C++ 的小技巧，只需要一行代码，就能轻松斩断这些依赖]]></description><author>everystep</author><pubDate>Tue, 10 Jun 2025 23:24:02 +0800</pubDate></item><item><title>取代C++，中国又一新兴岗位在崛起！这才是程序员未来5年最好的就业方向！</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496520&amp;idx=1&amp;sn=b94f632925c23c27b7431d78305542d6&amp;chksm=a76d3a023bfd37e911d912af31bbadf49ea57fadc93d705df81a97ea7f92c18f2978004f1988&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Deepseek全球爆火让AI技术又一次进入了快速发展期！百度、字节、腾讯等等巨头互联网公司，纷纷接入DeepSeek，加速落地AI应用！这让「大模型应用开发工程师」一跃成为炙手可热的岗位！DeepS]]></description><author>everystep</author><pubDate>Fri, 18 Apr 2025 07:00:00 +0800</pubDate></item><item><title>超越传统错误码：C++23 std::expected 如何实现类型安全的错误传递</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496512&amp;idx=1&amp;sn=639634d6d04d617b00450366c69a5c11&amp;chksm=a75dfa75212daf2e270ccf120fe2ce9724db891139bb6344f981c0d6a296fa4c7d2ff6ab550d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[嘿，朋友！👋 还记得刚学 C 语言或者刚接触 C++ 那会儿，我们是怎么处理函数可能出错的情况吗？是不是经常看到这样的代码：// 一个尝试做除法的"古老"函数int divide(int a, int]]></description><author>everystep</author><pubDate>Wed, 09 Apr 2025 23:30:00 +0800</pubDate></item><item><title>抽象类/接口类/聚合类区别到底在哪？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496495&amp;idx=1&amp;sn=464aa562d8116304f89ce3a3b442ca1b&amp;chksm=a7bd6b537a10db96f691cc3fcfcc14a2977948814ae2f444efc566d3f8b341cb19afb0e345c7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[嘿，同学！👋 你知道吗？在 C++ 的面试江湖里，抽象类、接口类和聚合类这仨兄弟可是名副其实的“高频考点”！为啥？因为它们仨能很好地考察你对 C++ 面向对象（OOP）的理解深度，以及你是不是真的把]]></description><author>everystep</author><pubDate>Tue, 08 Apr 2025 07:00:00 +0800</pubDate></item><item><title>现代C++建造者模式进化论：从C++98到C++23</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496493&amp;idx=1&amp;sn=f844018916e13d16044ca4c1798f9762&amp;chksm=a76216ed701d47577961f63c8d87d19e21deeafa6410d40b1cb7524a2ae6545e2a66031b70eb&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[还在为 C++ 对象那 长得令人发指 的构造函数参数列表抓狂吗？🤯 是不是经常在 int hp, int mp, int strength, int faith... 这样的参数“连连看”中迷失自我，]]></description><author>everystep</author><pubDate>Mon, 07 Apr 2025 07:00:00 +0800</pubDate></item><item><title>3分钟彻底搞懂！虚函数和纯虚函数的区别</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496437&amp;idx=1&amp;sn=162a93494c022803062fc766af7bd861&amp;chksm=a75fdd877fc747d2c72bc1dc73969140e73e23f6218e621338413c2828c5885977eb1e7bbb89&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[朋友们，咱们今天聊的 虚函数 和 纯虚函数，可不是什么边角料知识！这俩哥们儿在 C++ 面向对象编程里，那是 核心中的核心，基础中的基础！有多重要？这么说吧，你去面试 C++ 相关的岗位，十有八九会被]]></description><author>everystep</author><pubDate>Sun, 06 Apr 2025 07:00:00 +0800</pubDate></item><item><title>C++ 面试送命题：虚析构函数答不对，Offer 可能就飞了！</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496406&amp;idx=1&amp;sn=90abec5f93cce107108f5454bc7c8f05&amp;chksm=a71ba7d75bbb1e25a29fd46d3e049831e39c2afe8af2a14ec4b3aa3bff4a4ec69f687a95ad85&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[嘿，未来的 C++ 大佬们！👋 准备好迎接面试中的一个“经典款”问题了吗？没错，就是那个听起来有点玄乎的“虚析构函数”！别小看它，这玩意儿可是面试官考察你 C++ 基本功、特别是内存管理和多态理解的“]]></description><author>everystep</author><pubDate>Sat, 05 Apr 2025 07:00:00 +0800</pubDate></item><item><title>为什么面试官总爱问emplace_back和push_back的区别？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496395&amp;idx=1&amp;sn=c6357c3edb12f599aa3c67767588b703&amp;chksm=a78045297e18a398b393756bbb90eca294aa9e90a1d06d46f8108463b16dc813d29e79634a9d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[大家好啊！今天我们来聊聊 C++ 标准库容器里一对有趣的成员函数：emplace 系列（比如 emplace_back）和 push_back 系列。这俩哥们儿都能往容器里加东西，但性格和做事方式可差]]></description><author>everystep</author><pubDate>Fri, 04 Apr 2025 07:00:00 +0800</pubDate></item><item><title>什么场景下按值传递比引用更受欢迎？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496327&amp;idx=1&amp;sn=743fc0b30588e8117d55e9734c2ffa76&amp;chksm=a75cba8a785bed14c51354f0adc2e6a530468b71a4cc471aa35fda21f8efb25f44d479989ebe&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[话说当年（C++98 及以前），行走江湖的 C++ 大佬们都流传着一条铁律：“小老弟，传自己定义的类型（比如你用 class 或 struct 搞出来的玩意儿），尤其是大块头的，最好用 const 引]]></description><author>everystep</author><pubDate>Thu, 03 Apr 2025 07:00:00 +0800</pubDate></item><item><title>这个C++特性如何用10年时间吃掉所有回调场景？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496309&amp;idx=1&amp;sn=b7af0ecb6048b27d36febe25c21c5032&amp;chksm=a74dbf228c6cb92d684c0ac2ea1bc817455d4a3cd73dd21add4dfbe04a34b921db24fd54ad61&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[嘿，你知道吗？在 C++11 正式请来 lambda 这位"大咖"🌟之前，C++ 程序员们为了实现类似的功能，可是费了不少劲呢！"史前时代"🦕：函数对象（Functors）想象一下，在没有 lambd]]></description><author>everystep</author><pubDate>Wed, 02 Apr 2025 07:00:00 +0800</pubDate></item><item><title>为何说 C++ Lambda 是 std::bind 的终结者？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496283&amp;idx=1&amp;sn=2fe776ae24b9797950352637670798f3&amp;chksm=a7dcfc4f57bda7cc819dc2fd4895b1f9a841413f72043cae7f6cd1c02b31b93e8bf272673827&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[话说 C++11 带来了 std::bind 这个玩意儿，它其实是 C++98 时代的 std::bind1st 和 std::bind2nd 的"升级版" ✨，甚至在 2005 年左右就通过 TR1]]></description><author>everystep</author><pubDate>Tue, 01 Apr 2025 18:00:00 +0800</pubDate></item><item><title>从编译通过到运行时崩溃：深入剖析 C++ Lambda 默认捕获的致命缺陷</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496265&amp;idx=1&amp;sn=04abf0a3159f72eaae003c6b41a770cb&amp;chksm=a7913dc69d79c2b48dd104fa1ca2b988cdb27a2d2ae478f79bf38fb189fe6f59916adaa44eb1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[C++11 给了我们两种看起来很方便的默认捕获模式：[&]（默认按引用捕获）和 [=]（默认按值捕获）。哇，自动挡！是不是感觉编译器瞬间变得超级贴心？🥳 可惜，天下没有免费的午餐，这两种“自动挡”模式]]></description><author>everystep</author><pubDate>Mon, 31 Mar 2025 23:32:00 +0800</pubDate></item><item><title>为什么你永远不该直接删除旧函数？现代C++属性拯救方案大揭秘</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496255&amp;idx=1&amp;sn=4551b70246689b6c9b8eb57c842801e5&amp;chksm=a736eb26b2b41a5e559b37a283cd3b7d7928c06fceeca4ca9df08351552f7aeb296800df334c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🚨 您是否还在为这些问题头疼？▸ API升级后，用户仍在使用旧函数？▸ 代码库中的"毒瘤"函数无法直接删除？▸ 各编译器平台警告机制不统一，跨平台告警困难？💡 废弃属性（[[deprecated]]）]]></description><author>everystep</author><pubDate>Thu, 13 Mar 2025 07:00:00 +0800</pubDate></item><item><title>TypeScript引擎Go移植：编译速度提升10倍</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496191&amp;idx=1&amp;sn=db0acbd8429ccf38cb0c5a2338b694f0&amp;chksm=a764ae16340da9b2e9fcbbd92d79dd6a24fc29ad4f77efe4309840a291012eb4dd4b068357cc&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[TypeScript作为JavaScript生态中最受欢迎的静态类型系统之一，其主要价值在于为开发者提供卓越的开发体验。然而，随着代码库规模增长，TypeScript现有的基于JavaScript的编]]></description><author>everystep</author><pubDate>Wed, 12 Mar 2025 07:00:00 +0800</pubDate></item><item><title>C++14二进制字面量：位操作错误率降低90%的工程实践</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496187&amp;idx=1&amp;sn=b9faef9c4f77b471af6fcba8d8559290&amp;chksm=a7e94b407858e03abc023da8b139e8aed573e9f374c1e2e096792e72154dd42b08139eecf346&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🌟 您是否还在为这些问题头疼？▸ 位运算时需要将二进制心算成十六进制？▸ 看到0xFF时脑内闪过"这是多少位的1来着？"▸ 调试位掩码时眼花缭乱，0和1傻傻分不清？💡 二进制字面量一招解决！C++14]]></description><author>everystep</author><pubDate>Tue, 11 Mar 2025 07:00:00 +0800</pubDate></item><item><title>现代C++工厂模式的六代进化：从C++98到C++23</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496126&amp;idx=1&amp;sn=78c224d5d99eb04913655ac919d24efe&amp;chksm=a795622db6519d767bbb879f1e7cdd2556250a868e0bb1d4c801d8f2f6c149b11508986b70bc&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🔍 C++工厂模式：从条件分支到编译期注册的演进之路💡 现代C++开发者面临的工厂模式挑战：如何消除条件分支带来的维护成本？如何实现类型安全的对象创建接口？如何通过编译期优化提升工厂性能？🚀 标准演进]]></description><author>everystep</author><pubDate>Mon, 10 Mar 2025 07:00:00 +0800</pubDate></item><item><title>现代C++单例模式进化论：从C++98到C++23</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496073&amp;idx=1&amp;sn=af162e4ca46e55bcf7de1ee7deae8a23&amp;chksm=a7f7b808e1a6197e01d759e7f9c321eac707b9163fcf3499760af0c76f69fe42aec485579bc1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🔥 C++单例模式：从噩梦到一行代码的进化✨ 您还在为单例实现头疼吗？ 忘掉那些繁琐易错的双检锁吧！现代C++彻底颠覆了传统实现！🚀 从C++98的"线程不安全"到C++23的"完美单例"，见证简洁与]]></description><author>everystep</author><pubDate>Sun, 09 Mar 2025 07:00:00 +0800</pubDate></item><item><title>隐藏在C++14中的编程利器：返回类型还能这么写？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247496004&amp;idx=1&amp;sn=160e677ba3af3b3a2406bd8be0c0ff61&amp;chksm=a7376d71a0480a7063f39b5c5ea0ccc153dfdb0a6cfd3f910cf94b69192c51394f881aa8d12a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🌟 您是否还在为这些问题头疼？▸ 函数模板返回类型写到怀疑人生？▸ decltype(expr1 + expr2)的恐怖嵌套让眼睛疼？▸ 尾置返回类型-> decltype(...)写到手抽筋？💡 函]]></description><author>everystep</author><pubDate>Sat, 08 Mar 2025 18:40:00 +0800</pubDate></item><item><title>90%程序员都忽视的C++内存陷阱，你踩中了吗？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495987&amp;idx=1&amp;sn=497a523e2e248e5520d1e333ec46a0f3&amp;chksm=a725a0133f51c1a1285996f67d0274e0478dd1e2d79824def96cfc7015fada060c0e8de52441&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🔥 C++内存安全：你正在编写的现代语法，可能正在制造定时炸弹！⚠️ 80%开发者不知道的现代C++三大死亡陷阱：🚀 vector自动扩容 → 性能刺客🧩 智能指针类型擦除 → 内存泄漏元凶⏳ Lam]]></description><author>everystep</author><pubDate>Fri, 07 Mar 2025 07:00:00 +0800</pubDate></item><item><title>C++23开发环境速成指南：不改变系统配置，也能体验最新特性</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495955&amp;idx=1&amp;sn=990277bec7b2dcf821e585b4f3e9eede&amp;chksm=a704497ad68b72cdae3cd71ea32359144c8fb0ee6c884767188481a14a1c2646ffa277adbd90&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🚀自 C++11 推出以来，C++ 就像坐上了🚀火箭！标准更新📈越来越快，社区每天都有✨新特性爆炸💥！老旧编译器拖后腿？🤯 莫慌！🐳Docker 三大魔法✨帮你瞬间穿越到未来： 💎 环境隔离术 → 自]]></description><author>everystep</author><pubDate>Thu, 06 Mar 2025 07:00:00 +0800</pubDate></item><item><title>C++14变量模板深度解析：如何用变量模板统一常量定义？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495779&amp;idx=1&amp;sn=e6e25cc2915532ca886b8cfe138da010&amp;chksm=a740296acfcd850e14ba88d29897e51c25e544c4abc3d382a1fd021d58a166b20fc480081b7e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🌟 您是否还在为这些抓狂？▸ 重复定义不同精度的π值？▸ 每次访问模板常量都要穿越::value迷宫？▸ 函数模板的括号地狱折磨手指？💡 变量模板一招破局！C++14带来的编译期黑科技，让常量定义跨越]]></description><author>everystep</author><pubDate>Wed, 05 Mar 2025 07:00:00 +0800</pubDate></item><item><title>一篇文章掌握C++14通用Lambda：让你的代码既简洁又高效</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495692&amp;idx=1&amp;sn=3ea3e9fd87ff21eae8389416dbfd38a6&amp;chksm=a756097e9e0bfea73224073e27a9c679f4e1fad6e9af2f0feb7068c5e0e4ecbdc735b632ad71&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[🔥你的Lambda还在手动写类型？C++14说：该进化了！🤖✨通用Lambda——让函数对象拥有「自适应超能力」的语法革命！🚀 1行代码=100种可能？🧩 类型自适应 × 代码极简主义 × 模板魔法💡]]></description><author>everystep</author><pubDate>Wed, 26 Feb 2025 22:14:07 +0800</pubDate></item><item><title>3分钟搞懂TCP三次握手</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495621&amp;idx=1&amp;sn=a851caf8d43f67d4438bdffee4cef348&amp;chksm=a7d5770a100a2308608e2c789a862bc9fd92aba08f7fa2a050a8eb43d5f443caedf04389522f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[想象你要在数字世界建造一座桥梁🌉——这座桥必须同时满足：✅ 双向可靠：确保数据能安全往返✅ 防御洪流：抵御网络延迟的"时光倒流"攻击✅ 密码同步：建立专属的数据传输暗号TCP三次握手正是这样的"桥梁建]]></description><author>everystep</author><pubDate>Sun, 23 Feb 2025 23:30:00 +0800</pubDate></item><item><title>如何根据业务场景选择Reactor/Proactor架构？</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495605&amp;idx=1&amp;sn=596f88b9a034066a00935545964ec074&amp;chksm=a79b423c5153514a6c0b41aa24718e1c97a14b0ef350ab8984c068ce0e2228e0ff877f545535&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[▌开篇灵魂拷问：当你网购时，是更喜欢快递柜自提还是外卖式上门？这两种服务模式背后，竟隐藏着服务器高并发设计的终极哲学！先看两个揪心场景：上班取快递📦：早高峰挤电梯到1楼，发现快递柜前已排起长龙（Rea]]></description><author>everystep</author><pubDate>Sat, 22 Feb 2025 23:54:38 +0800</pubDate></item><item><title>阻塞还是异步？看完这篇，你再也不用纠结 I/O 模型！</title><link>http://mp.weixin.qq.com/s?__biz=MjM5NjAxMzk4NA==&amp;mid=2247495552&amp;idx=1&amp;sn=59db5b8b00337a5e2adf27db277295fd&amp;chksm=a7fe6ef2f701ef3b6547f1ffcc9f16309f781f95c5de8d8f5690d207191ce0f939480b0d8b0a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[当你在键盘敲下回车时，数据开始内核态与用户态的穿梭 🖥️💫💾。I/O的本质是：用户程序 ↔ 内核缓冲 ↔ 硬件设备 的三层数据搬运。5种模型的核心差异在于——等待数据就绪的策略 🚦演化驱动力 🚀：阻塞]]></description><author>everystep</author><pubDate>Thu, 20 Feb 2025 07:00:00 +0800</pubDate></item></channel></rss>