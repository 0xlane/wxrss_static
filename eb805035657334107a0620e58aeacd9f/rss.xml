<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Rust开发笔记</title><link>https://wxrss.reinject.top/eb805035657334107a0620e58aeacd9f/</link><description>An RSS feed.</description><language>zh-cn</language><lastBuildDate>Sun, 26 Oct 2025 03:32:53 +0800</lastBuildDate><generator>wxrss -- https://github.com/0xlane/wxrss</generator><item><title>无畏并发，Rust 助你成为编程高手</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490181&amp;idx=1&amp;sn=6a34e07af981c459e38723a92bfe9091&amp;chksm=c05266647f61524eb31f77824929ad53a3501177d006f65543f955c76972d5bb3fca34fde5a5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在人工智能迅猛发展的今天，高效、稳定的系统支撑能力变得前所未有的重要。《Rust 并发编程实战课》正是为 AI 开发者量身打造的一门课程，帮助你在构建高性能、低延迟的 AI 系统时，掌握底层并发机制与]]></description><author>Rust开发笔记</author><pubDate>Thu, 09 Oct 2025 08:00:00 +0800</pubDate></item><item><title>2025年，前端开发为什么必须学习Rust？</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490162&amp;idx=1&amp;sn=8c3dd4667ca46ceab7be4dacffd6e44f&amp;chksm=c094826a13278bb5dfa340247c95e2ac320b65217a79b7c042964cce3bac14d54a1a6d0559c5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在技术快速演进的今天，前端开发领域正面临着前所未有的挑战与机遇。随着应用复杂度的提升，性能、安全性和可维护性成为开发者必须直面的核心问题。尽管JavaScript和TypeScript在前端生态中占据]]></description><author>Rust开发笔记</author><pubDate>Wed, 08 Oct 2025 15:51:03 +0800</pubDate></item><item><title>海外专利基础课推荐！内附免费领取通道</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490155&amp;idx=1&amp;sn=6c1c4e6e03bd3aa8146f453c2f515804&amp;chksm=c0a15156201095cdede7b310cde0d7e268f3e22b737ae973726f2d992ad67a9e9f3116d2bd2c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[你对海外专利了解多少？不妨花1分钟来测试一下。（也可跳过测试，滑至文末直接领取课程）问题一：申请中国专利和海外专利必须同步进行吗？A.不是必须，可以先申请中国，后面再随时申请海外即可B.不是必须，可以]]></description><author>Rust开发笔记</author><pubDate>Wed, 01 Oct 2025 09:00:00 +0800</pubDate></item><item><title>Rust 搜索引擎的基础与前沿，2025年必学</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490150&amp;idx=1&amp;sn=6f774585729c1fdcd091a5b34672c21c&amp;chksm=c0c1619599717d87a8e12d09c7c391213904aeb77eaa95b1038b0925c713bec5ab62e8f465b9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书搜索技术从20世纪90年代开始逐渐走入大众视野，随着互联网的快速发展而不断演进，从早期依赖人工编制的启发式规则，到后来引入机器学习模型处理大规模数据，再到如今的大语言模型时代利用生成]]></description><author>Rust开发笔记</author><pubDate>Tue, 30 Sep 2025 08:00:00 +0800</pubDate></item><item><title>掌握Rust十大核心概念，提升工程能力</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490145&amp;idx=1&amp;sn=5a0d4ea90d8cdfced980836965e1df3d&amp;chksm=c0944978c8befd56873df4e847608342d97fdcb9660057cecfbd5a8de92e5286450a3dcbf9bb&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust作为一门现代系统编程语言，凭借其独特的设计理念和强大的工具链，正逐渐成为构建高性能、高可靠性软件的首选。它不仅解决了传统系统编程中常见的内存安全和并发问题，还通过一系列创新概念提升了代码的可维]]></description><author>Rust开发笔记</author><pubDate>Mon, 29 Sep 2025 13:19:56 +0800</pubDate></item><item><title>将 Rust 二进制文件缩小 70%</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490131&amp;idx=1&amp;sn=e3a02e8d8b08c92e0e3af9fb7f5b8d05&amp;chksm=c014e2cc2b26cd379b976e91388283cf7c283dfef430caf94e44f5ec17cf1fe85eda1420e1e1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 语言因其卓越的内存安全性和高性能表现，受到越来越多开发者的青睐。然而，许多开发者在首次编译 Rust 程序时，都会对其生成的二进制文件体积感到惊讶：一个简单的“Hello, World!”程]]></description><author>Rust开发笔记</author><pubDate>Fri, 12 Sep 2025 08:00:00 +0800</pubDate></item><item><title>模运算：Rust密码学的数学基石</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490128&amp;idx=1&amp;sn=7de62c7fb3da6c5826b8ff406da63417&amp;chksm=c0968a7d2b3086b5fbc2edf5ce9623477eb06562b555f0973539138414b261ae1ca47370225f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[模运算在计算机科学领域占有独特地位，尤其在现代密码学体系中发挥着不可替代的作用。这种运算方式不仅构成了多种加密算法的基础，还为数据处理提供了高效的数学工具。从网络安全到分布式系统，从数据校验到身份验证]]></description><author>Rust开发笔记</author><pubDate>Thu, 11 Sep 2025 10:51:59 +0800</pubDate></item><item><title>深入探索 Rust 零拷贝并发的高效实践</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490111&amp;idx=1&amp;sn=ef0d57b63acfee08a91dc27092e3f527&amp;chksm=c0c55c7f350cbd9d8965a6184966770a95bdb0dc0026f5cddafb77b0d51bdcc527dd64184976&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在当今高并发的系统编程场景中，性能优化一直是开发者关注的核心。特别是在数据处理密集的应用中，减少不必要的内存拷贝不仅可以显著提升吞吐量，还能降低延迟与内存占用。Rust 语言凭借其独特的所有权系统和类]]></description><author>Rust开发笔记</author><pubDate>Tue, 09 Sep 2025 20:42:22 +0800</pubDate></item><item><title>Rust开发者必入，Vibe编程全栈开发教程来啦~</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490059&amp;idx=1&amp;sn=5d52852f5c7addf133c3082b77d178e7&amp;chksm=c011b50b3e5cd765600f0b29601ca0a119266da571711b28f25b2c3e864d78676e3ba9dcad84&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书Part.1Vibe编程全栈开发教程来啦~自计算机诞生以来，编程范式经历了多次变革。从最初的机器语言到汇编语言，再到高级编程语言的出现，每一次变革都极大地提高了开发效率，降低了技术门]]></description><author>Rust开发笔记</author><pubDate>Thu, 04 Sep 2025 08:00:00 +0800</pubDate></item><item><title>使用Rust语言实现ESP32嵌入式编程</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490096&amp;idx=1&amp;sn=df35601ac5294bf0b4dfd0877659fee4&amp;chksm=c0bbec193a5421455834126d941a04e414860cc7d90c8f9610c74ec4b3ff7fc046f7dfff8c60&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[随着物联网和嵌入式系统的快速发展，开发人员对高效、可靠的编程接口需求日益增长。Rust语言以其卓越的内存安全性和并发性能，正在嵌入式开发领域获得越来越多的关注。esp-hal项目正是Rust与ESP3]]></description><author>Rust开发笔记</author><pubDate>Wed, 03 Sep 2025 21:25:09 +0800</pubDate></item><item><title>基于 Rust 实现网络流量监控工具</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490054&amp;idx=1&amp;sn=9ed099c9d04a36834ae30f6b094b16e2&amp;chksm=c01989fbd6a556273bb8c1e6a183bdf79bfa4ef1597d843b78100f2d341fea2066c34e9d4aa4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在网络技术日益发展的今天，对网络流量的监控与分析已成为开发人员、系统管理员和安全专家日常工作中不可或缺的重要环节。一个高效、直观的网络监控工具能够帮助专业人员快速识别网络问题、检测安全威胁并优化网络性]]></description><author>Rust开发笔记</author><pubDate>Tue, 02 Sep 2025 23:53:58 +0800</pubDate></item><item><title>从Spring Boot的自动化到Rust的手动实现</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490041&amp;idx=1&amp;sn=f90cd7f3d212efbc4ac0ebc8663ceba2&amp;chksm=c017a3d17adf2ef4fc28a1e73ffb7fdfc1ae3bd9219e0cf662ef5abdcab296f8a474415991d9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代软件开发中，Web框架如Spring Boot极大地简化了服务器端开发，让开发者能够快速构建高效的应用。然而，这种便利性往往掩盖了底层技术的复杂性。作为一名长期使用Java和Spring Boo]]></description><author>Rust开发笔记</author><pubDate>Thu, 28 Aug 2025 23:47:05 +0800</pubDate></item><item><title>Rust性能抉择：深入解析动态分发与泛型的实战差异</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490035&amp;idx=1&amp;sn=2c067c4a2c64c360bd29210c8e7632f2&amp;chksm=c0b25771c45208dcfce6e1ecac96c20d6f1a8b1a51f0029dfa8d3ef48263a3a60576e7abd0e0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust编程实践中，我们常常面临一个关键设计决策：是使用动态分发（Dynamic Dispatch）还是泛型（Generics，即静态分发）。这两种机制在处理多态性时表现出根本性的差异，直接影响代码]]></description><author>Rust开发笔记</author><pubDate>Wed, 27 Aug 2025 09:00:00 +0800</pubDate></item><item><title>Rust开发者的副业之路</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490034&amp;idx=1&amp;sn=12f82b9fc7cf729f207a8c7219c9117b&amp;chksm=c0db65feff5eea8ce3b2eed4af58eff92136c61b202b8086118135de5c046c3eca32109a1b96&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[]]></description><author>Rust开发笔记</author><pubDate>Tue, 26 Aug 2025 18:00:00 +0800</pubDate></item><item><title>反对Vibe coding不过是Rust程序员的自我感动而已</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490023&amp;idx=1&amp;sn=48c6949671c55875c31f19c6df59aff0&amp;chksm=c0cad6f557315f5bf9f00b7f959e31bed760b9e27cae9ceac17b1f2bd285eec6a4a5e9bd74fd&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书当你只需描述需求，AI便能自动生成代码，程序员的角色正被重新定义近年来，随着AI编程工具的快速发展，一种名为“氛围编程”（Vibe Coding）的新范式正在悄然兴起。与前特斯拉人工]]></description><author>Rust开发笔记</author><pubDate>Mon, 25 Aug 2025 16:54:31 +0800</pubDate></item><item><title>Rust编程：10个让代码更安全更快速的核心模式</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247490017&amp;idx=1&amp;sn=88a841354398cfc0702c48a1390a519e&amp;chksm=c0426f6b4f9fa3fed192b611c85f4c69c3d4a92e815b373ec607d22d9113db3242e15e0fa43f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代软件开发中，开发者们面临着一个永恒的挑战：如何在保证代码安全性的同时获得极致的性能。大多数编程语言要求开发者在这两者之间做出艰难的选择，但Rust语言打破了这种传统的权衡。通过其独特的所有权系统]]></description><author>Rust开发笔记</author><pubDate>Sun, 24 Aug 2025 09:00:00 +0800</pubDate></item><item><title>解锁Rust极速性能：构建高效应用的核心策略</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489996&amp;idx=1&amp;sn=96c2339d9ace2d5c6a4eb9134d5b71e4&amp;chksm=c0930a2fa5e92b5e8fb3d46519a130f6040aa0b22466d558717fb9e52e264382c3ab0036a642&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[内存管理是高性能Rust应用的核心。与依赖垃圾回收的语言不同，Rust通过所有权系统提供精细的内存控制能力。栈内存优先原则应成为开发者的第一准则：栈分配不仅速度快，还能减少内存碎片。考虑以下典型场景：]]></description><author>Rust开发笔记</author><pubDate>Thu, 14 Aug 2025 22:02:31 +0800</pubDate></item><item><title>从“通用AI”到“可用AI”，所有人都能掌握AI编程技能</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489978&amp;idx=1&amp;sn=7a656677f28eec8a5160ab1946046d47&amp;chksm=c095daa068e46476dc896d91c23429c9c98c5bbced4e72ae9a3503c34f9798db6ca2061ce0c4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书从智能家居贴心入微的温馨陪伴，到自动驾驶汽车在广袤道路上风驰电掣，AI以一种无感知的渗透，成为我们生活中不可或缺的一部分。微软全球首席传播官Frank X. Shaw说过：“我们已迈]]></description><author>Rust开发笔记</author><pubDate>Thu, 31 Jul 2025 10:08:42 +0800</pubDate></item><item><title>从 Electron 到 Tauri：桌面应用性能提升 10 倍的完整迁移指南</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489973&amp;idx=1&amp;sn=7b7a1c48a60838a26c8141ed7b71b120&amp;chksm=c055e7c8d0692bae3d619a4280fc664730971d4b0b7308962b4569a8391f2caaa385a0850343&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在桌面应用开发领域，Electron 长期以来一直是跨平台开发的首选方案。然而，随着用户对应用性能要求的不断提高，许多开发者开始寻找更轻量、更高效的替代方案。Tauri 的出现为我们提供了一个令人兴奋]]></description><author>Rust开发笔记</author><pubDate>Tue, 29 Jul 2025 09:10:56 +0800</pubDate></item><item><title>京东优惠券领取攻略丨教你加入高性价比群，每天省一笔！</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489955&amp;idx=1&amp;sn=cba1ef6ad47b879890cf8330f2208bc4&amp;chksm=c0eb400f93314cf8fa203f397605fc35eeebaffa4883fa97398179f55b7ac7f1aaba02d87614&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[很遗憾地说，这不是一篇教你京东plus怎么充值，也不是测评哪家平台更便宜的攻略。这只是我个人作为一个普通用户，在节假日、家庭采购中不断摸索、积累下来的「实用省钱经验」，分享给有需要的朋友。为什么我能省]]></description><author>Rust开发笔记</author><pubDate>Sat, 26 Jul 2025 09:00:00 +0800</pubDate></item><item><title>Rust Traits 完全指南：从 JavaScript 开发者的视角深入理解</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489839&amp;idx=1&amp;sn=ae77e13061076683236acc2d9d7f22ae&amp;chksm=c07bc137f548c72a4f3c89e866d552962c397de5453c7297f446a82a59a8e18fb245baabb7b9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[作为一名 JavaScript 开发者，当你第一次接触 Rust 时，可能会被其严格的类型系统和复杂的所有权规则所困扰。但是，Rust 中的 Traits 概念实际上为我们提供了一种既灵活又安全的代码]]></description><author>Rust开发笔记</author><pubDate>Sat, 28 Jun 2025 11:51:18 +0800</pubDate></item><item><title>Rust 1.88.0 版本深度解析：让链、裸函数与自动缓存清理</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489817&amp;idx=1&amp;sn=c32a4518ddc66fbe36f89169844ab01c&amp;chksm=c0cfc6c08d82ba45c0328df5608a216345c430128cc6e49dbf56dd7ab69ac75accbce20eb23e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust 语言在 2025 年 6 月 26 日正式发布了 1.88.0 版本，这个版本带来了三个重要的新特性：让链（Let chains）、裸函数（Naked functions）和 Cargo 的]]></description><author>Rust开发笔记</author><pubDate>Fri, 27 Jun 2025 13:57:25 +0800</pubDate></item><item><title>Rust：当安全设计成为效率的代价</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489758&amp;idx=1&amp;sn=c572f5e9144d51494f5560923c46c0e2&amp;chksm=c00ce17d0180f2039042df6bc456bb1d0991134699d97cd20f55e836ed391576b917aff9e01d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[从缓存实现看开发效率差异Go版本仅需基本互斥锁：type Cache struct {    data map[string]string    mu   sync.RWMutex}func (c *]]></description><author>Rust开发笔记</author><pubDate>Sat, 21 Jun 2025 23:50:17 +0800</pubDate></item><item><title>MCP：AI界的“Type-C”——让AI模型和世界对话从此“零代沟”！</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489740&amp;idx=1&amp;sn=6cef860f536ede124dfe520c45b1544d&amp;chksm=c09c25cf6438bc734efc08192231d718e5ebf33d66c936e8d0da79b9488f932744cb048cfa49&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书编辑推荐它是 AI时代的“万能连接器” ——告别机械式应答！让AI 理解复杂上下文的“对话规则”它能治好大模型的“健忘症”——自动整理“记忆碎片”，打通信息孤岛它能打破技术壁垒，让人]]></description><author>Rust开发笔记</author><pubDate>Tue, 10 Jun 2025 14:05:01 +0800</pubDate></item><item><title>Rust 无锁队列的设计与实现</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489736&amp;idx=1&amp;sn=4f3c75bededbc9ad1af8bb8cd52d87b0&amp;chksm=c0b92a1e1a840d329d5652d0826dfd88de0b2744b546a9609b0c07bb37e4deee3ac55afbd185&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在高吞吐量的Rust服务中，当并发任务数量达到数千级别时，性能瓶颈往往并非业务逻辑本身，而是源于传统同步机制的开销。互斥锁（Mutex）和读写锁（RwLock）带来的竞争问题、缓存行乒乓（cache-]]></description><author>Rust开发笔记</author><pubDate>Sun, 08 Jun 2025 22:16:29 +0800</pubDate></item><item><title>源码 | Actix 与 PostgreSQL 集成：从原理到实践</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489723&amp;idx=1&amp;sn=3ac86d02d653d9d5e3580b932ab7f9da&amp;chksm=c0a14aef84e9da170b0627f5d4dfcee4e02a5fb9a948368b17dd8d6ba269e892ebda52f113f8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代 Web 开发中，Rust 以其高性能与安全性，逐渐成为后端开发的新宠。而 Actix 作为 Rust 领域最为流行的异步 Web 框架之一，其强大的并发能力和丰富的生态使其非常适合用于构建高性]]></description><author>Rust开发笔记</author><pubDate>Sat, 31 May 2025 09:37:00 +0800</pubDate></item><item><title>项目源码 | 基于 Actix-Web 与 WebSocket 实现高性能的群聊系统</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489669&amp;idx=1&amp;sn=c506fb1522822784d30f05ad64c5f320&amp;chksm=c0e8792e9d429201aaa3e76c4f5bbdce114961bd49e8ba02dcc242567a202813c5bbe1b1ba4c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代互联网应用中，实时通信已成为不可或缺的关键能力。无论是社交平台、在线协作工具还是多玩家游戏，实时性都直接影响用户体验。WebSocket 技术以其全双工、低延迟的特性，成为实现高效实时通信的首选]]></description><author>Rust开发笔记</author><pubDate>Sun, 25 May 2025 23:13:42 +0800</pubDate></item><item><title>突破Python局限：Rust赋予开发者的五大核心优势</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489654&amp;idx=1&amp;sn=7891b6016f2ed781adda474041037705&amp;chksm=c084111be395b3e896fe7b53acfe6b76e7b139c511b692874bde6f743d611ca7644b30a319bd&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Python开发者常因其简洁的语法和丰富的生态而忽视其他语言的潜力。然而，Rust作为一门系统级语言，正在以独特的方式重新定义现代软件开发。本文将通过具体的技术对比和实际代码示例，揭示Rust如何帮助]]></description><author>Rust开发笔记</author><pubDate>Sat, 24 May 2025 23:40:49 +0800</pubDate></item><item><title>必须知道的Rust数据类型</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489634&amp;idx=1&amp;sn=268560ff89cc2bdd3131cfb273b995cc&amp;chksm=c013530f87182d37831274e460363aa2708fcab3122f23b03e949998d52bdbb1e775ceb25c7f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[整数类型Rust的整数类型系统以精准性和安全性著称，提供了从8位到128位的多种选择。通过明确指定i8至i128的有符号整数，开发者可以精确控制数值范围和内存占用。例如，i8的取值范围为-128到12]]></description><author>Rust开发笔记</author><pubDate>Fri, 16 May 2025 09:52:27 +0800</pubDate></item><item><title>Rust 数智化研发新范式，企业数字化转型的效能突破</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489621&amp;idx=1&amp;sn=23ce0b89e30c361f4c33438b59a3598b&amp;chksm=c0c2cc0ed835abf4e621bed6cf819c9df81a33a0dbd4c9cad2a2ffa8c33d19dea5fde0eebb6c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关注我们丨文末赠书在数字化浪潮席卷全球的今天，数据已成为新的生产要素，算法成为新型决策工具，算力构筑起竞争新基座。这一变革不仅重塑了消费端的人货场关系，更深刻改变着产业端的研发范式与管理逻辑——当银行]]></description><author>Rust开发笔记</author><pubDate>Thu, 15 May 2025 16:02:33 +0800</pubDate></item><item><title>Rust并发编程中的内部可变性</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489617&amp;idx=1&amp;sn=827364830bac4304e87a5e82bf98c638&amp;chksm=c09474b8cf091f7d065cfe5c4186b97e4e1813af24a14bc53cbd9bd9031047b6fb4d75cc3b96&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust以其内存安全和无畏并发著称，而实现这一特性的核心机制之一便是内部可变性（Interior Mutability）。本文将通过详细的技术解析和代码示例，深入探讨这一机制的原理、应用场景及实现方式]]></description><author>Rust开发笔记</author><pubDate>Mon, 12 May 2025 08:00:00 +0800</pubDate></item><item><title>Rust内存安全：开发者是否应全盘接受？</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489605&amp;idx=1&amp;sn=541f72d8a57657ec1e1090f9097e74e9&amp;chksm=c034b7bd2cee9acdf8cef18049376cf46e6da9e6c2451b666d5ea5f45672e28aaf62ec2d7131&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[近年来，Rust因其零成本抽象、编译时内存安全保证和高性能等特性，被广泛认为是系统级编程的未来。微软、谷歌、亚马逊等科技巨头纷纷将其应用于操作系统、浏览器引擎和云计算基础设施。Stack Overfl]]></description><author>Rust开发笔记</author><pubDate>Sun, 11 May 2025 23:33:54 +0800</pubDate></item><item><title>Go到Rust：代码对比揭示60% CPU使用率降低的技术路径</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489597&amp;idx=1&amp;sn=013571ac4ee6e6c13501e6a08193aec8&amp;chksm=c04cd89bb01a7182d29b0e9cd4c031f561919e9575318692196db72e1584a83d877479c6413c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Go与Rust作为现代系统级编程语言，在并发处理和内存管理上采取了截然不同的设计哲学。本文通过四个典型场景的代码对比，剖析两种语言在CPU效率层面的核心差异，揭示为何部分技术团队通过语言迁移实现了60]]></description><author>Rust开发笔记</author><pubDate>Thu, 08 May 2025 16:08:23 +0800</pubDate></item><item><title>提升Rust代码质量的七个惯用模式</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489585&amp;idx=1&amp;sn=7d120696fa412203bd1eea5532c52d01&amp;chksm=c068d62f6b3b2034b8c6a63652ead3b1c9ffaa8a7807aa7ccfc92ec458f05a41c8160e1a9cb4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust以其对内存安全和零成本抽象的设计闻名，但编写符合语言习惯的代码往往是开发者面临的挑战。本文将通过具体场景和完整代码示例，解析七个能显著提升代码质量的惯用模式。模式匹配取代显式检查新手常通过is]]></description><author>Rust开发笔记</author><pubDate>Sat, 26 Apr 2025 10:25:49 +0800</pubDate></item><item><title>Rust中返回Trait的强大功能</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489539&amp;idx=1&amp;sn=aae0cb50ed383710663e0edfbe99a32f&amp;chksm=c0b7f40cc552692f9b97634f892ed52b2a5b6a3dfadd642a08e9d0b9270521435f9d001e828e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust语言中，Trait是定义共享行为的核心机制。它允许开发者通过抽象接口描述类型的功能，而无需绑定到具体实现。这种特性在构建模块化、可扩展的代码库时尤为重要。然而，当需要从函数中返回Trait对]]></description><author>Rust开发笔记</author><pubDate>Sat, 05 Apr 2025 23:17:19 +0800</pubDate></item><item><title>Rust错误传播的最佳实践</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489524&amp;idx=1&amp;sn=e58a7253cb3ee392e55f1c4c93cc2681&amp;chksm=c0bd542badd6507c5df416390a60dd8be7e3498b8b36193213767be90a379bdf641d0a2766f3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust作为一门注重安全与性能的系统级编程语言，其错误处理机制以简洁和高效著称。与其他语言依赖异常机制不同，Rust通过Result<T, E>枚举类型和?运算符的组合，提供了一种显式且类型安全的错]]></description><author>Rust开发笔记</author><pubDate>Fri, 04 Apr 2025 23:46:23 +0800</pubDate></item><item><title>Rust中的UDP编程：高效网络通信的实践指南</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489520&amp;idx=1&amp;sn=e3b9255f4d1fb2d85422cd44aac9433f&amp;chksm=c081b199b52ff420b964dac64ece015a93a78ed2bd579af2c42680d1ae4e2d069c5610f9d179&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在实时性要求高、允许少量数据丢失的场景中，UDP（用户数据报协议）凭借其无连接、低延迟的特性成为理想选择。Rust语言凭借内存安全和高性能的特点，为UDP网络编程提供了强大的工具支持。本文将深入探讨]]></description><author>Rust开发笔记</author><pubDate>Thu, 03 Apr 2025 13:37:58 +0800</pubDate></item><item><title>探索Rust中while let的实践</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489516&amp;idx=1&amp;sn=32aedd7b97cb4065068ceb9abd880f05&amp;chksm=c0bf826b17e0654b9cb6801abf7c58a132bb8b70c0e0119910fb48288f13453b1337ed403bd9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust语言的流程控制机制中，while let结构是一个常被低估但极具实用价值的语法糖。这种将模式匹配与循环控制相结合的语法形式，为开发者提供了更清晰简洁的代码表达方式，特别是在处理复杂数据结构]]></description><author>Rust开发笔记</author><pubDate>Tue, 01 Apr 2025 09:26:33 +0800</pubDate></item><item><title>【文末赠书】久等！Rust官方著作The Rust Programming Language中文版第2版终于来啦！</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489512&amp;idx=1&amp;sn=138bd2620132aea67b8863240da1fea2&amp;chksm=c024401ed1758c04fe365ea208aad8696634e22c2a504753710a3f7ff1c1be1e16fe0bba913f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust语言这几年在编程界可谓是风光无限，在TIOBE榜单中一路高歌猛进，2025年年初已稳居第13位，照这趋势，未来两年冲进前十都不是梦。它能如此受欢迎，凭借的是强大的实力。既能让开发者掌控底层细节]]></description><author>Rust开发笔记</author><pubDate>Mon, 31 Mar 2025 11:09:26 +0800</pubDate></item><item><title>新手必读的 Rust 字符串解析</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489508&amp;idx=1&amp;sn=bdef6308f47aeac516af4654276d31c4&amp;chksm=c0f03c22f1ec35ab0a9f52f6afedfc20bd5f74ed9baeaecb82427e572f9a105ed9621e782207&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在系统级编程语言领域，Rust以其独特的内存安全保证和高性能特性脱颖而出。字符串处理作为编程语言的基础功能，在Rust中呈现出与众不同的设计哲学。本文将通过实践视角，深入剖析Rust字符串的核心机制，]]></description><author>Rust开发笔记</author><pubDate>Sun, 30 Mar 2025 22:03:45 +0800</pubDate></item><item><title>并非所有人都适合学习 Rust</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489494&amp;idx=1&amp;sn=869d6a45ac7f8fbc2a9a697955be9c7a&amp;chksm=c0827fc145ef0106a2c38f4230584bc8b456f7a4f2ae09d84d3ec13441a47dd7033517dc5fd8&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[近年来，Rust语言凭借其独特的内存安全保证和卓越的性能表现，在系统级编程领域获得了广泛关注。但在这片赞誉声中，一个关键问题逐渐浮现：为什么这个被众多技术专家推崇的语言，并未像其他流行语言那样快速普及]]></description><author>Rust开发笔记</author><pubDate>Wed, 26 Mar 2025 22:12:30 +0800</pubDate></item><item><title>并行与选择：Rust异步编程中join!与select!</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489484&amp;idx=1&amp;sn=af12fd0706d6d86ddc2f75b7e8ef7e07&amp;chksm=c07c60a8ae8827c04ddb1cfbe56b4841a5d12d1520495407d7aaf2c8eabbc9451ba3f1cf461d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust的异步编程实践中，开发者经常面临需要同时处理多个异步任务的场景。join!和select!这两个宏为并发控制提供了不同的解决方案，但它们的适用场景和行为特征却存在显著差异。本文将从底层原理、]]></description><author>Rust开发笔记</author><pubDate>Mon, 24 Mar 2025 09:54:22 +0800</pubDate></item><item><title>Rust异步编程中的Stream Trait</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489474&amp;idx=1&amp;sn=2b962b530e74c912b336859a189e07be&amp;chksm=c06756cc18a97c7c11f684471aeb0abab0aa9f6f277d8d15ad3f10d92c30325ace4f40f74703&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代异步编程场景中，处理连续数据流的需求日益普遍。无论是网络协议的分帧处理、实时数据采集，还是复杂事件流的处理，都需要一种能够有效管理异步序列的机制。Rust语言通过Stream trait提供了这]]></description><author>Rust开发笔记</author><pubDate>Sun, 23 Mar 2025 23:29:00 +0800</pubDate></item><item><title>Rust包系统入门：如何轻松管理你的代码？</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489460&amp;idx=1&amp;sn=40f67f4181ccf5533387c783eb8d56e3&amp;chksm=c039b0a4725182afabd7c01841fdc20ebdfe227c58f2adb360d509a4744aa87f1f6a3932a799&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在软件开发领域，模块化设计早已成为构建复杂系统的基石。Rust语言从诞生之初就将工程化思维融入语言设计，其包管理系统正是这一理念的集中体现。与其它语言相比，Rust通过Cargo工具和严谨的模块规范]]></description><author>Rust开发笔记</author><pubDate>Sat, 22 Mar 2025 23:41:16 +0800</pubDate></item><item><title>用 jemalloc 优化 Rust 的内存管理</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489455&amp;idx=1&amp;sn=d3b84796684a304f25e9ed1d11b56dd9&amp;chksm=c0002d5f83dce27e24a579fb9e3c331673fee9370aaaedce6d1b88747e13508e54db0539e9b2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代编程实践中，内存管理效率往往决定应用程序的性能上限。Rust语言虽然通过所有权系统实现了内存安全，但底层分配器的选择仍然对性能产生深远影响。jemalloc作为高性能内存分配器的代表，其设计哲]]></description><author>Rust开发笔记</author><pubDate>Tue, 18 Mar 2025 23:57:17 +0800</pubDate></item><item><title>跨平台桌面应用开发：Tauri与Electron的技术选型</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489451&amp;idx=1&amp;sn=78e7658b1ccc019d75ff99f045c9e227&amp;chksm=c0eab79d328665420a59f143dea7f4dbad3d1199963984bbfbf1cc92c26549bd3da8d761e44e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在桌面应用开发领域，开发者始终面临一个核心问题：如何在跨平台兼容性、性能表现和开发效率之间找到最佳平衡。Tauri和Electron作为两个备受关注的解决方案，代表了两种不同的技术路线选择。本文将从]]></description><author>Rust开发笔记</author><pubDate>Sun, 16 Mar 2025 14:58:25 +0800</pubDate></item><item><title>从向量到哈希集合：探索Rust的核心数据结构</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489447&amp;idx=1&amp;sn=1b921b2ef837d6e5ad340e202f4d62a6&amp;chksm=c094f451e39a044199a44f5f5ca3fce90dac4ff2cbb69ce689cff8775057be58686f96f1fcb4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[Rust作为一门系统级编程语言，其数据结构的实现不仅注重性能，还通过所有权和生命周期机制保证了内存安全。理解这些数据结构的设计原理和使用场景，是掌握Rust编程的关键。本文将从基础的向量（Vec）出]]></description><author>Rust开发笔记</author><pubDate>Thu, 13 Mar 2025 23:13:45 +0800</pubDate></item><item><title>Rust中的Copy与Clone：揭秘数据复制的核心差异</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489443&amp;idx=1&amp;sn=00c8b2850e068e6ed9a6642424294a55&amp;chksm=c04b907824d3acc5efbfc1d55e802c1eaed27ad99418ec13b984a96dc9c4a580d6f21118ccd7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在Rust语言的所有权系统中，数据复制是一个需要开发者精确控制的底层操作。Copy和Clone这两个trait常被初学者混淆，但它们在语义和实现层面存在本质区别。本文将深入探讨二者的技术细节，帮助开]]></description><author>Rust开发笔记</author><pubDate>Sun, 02 Mar 2025 23:45:54 +0800</pubDate></item><item><title>保障Rust并发编程的可靠性：深入内存顺序机制</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489439&amp;idx=1&amp;sn=e2738d18f394b0da182f7c80e3ae4f91&amp;chksm=c0e3816e540066d7e9f7defa0bc32bb84285a841919fccfec646361136fd05c3e543dc900fdf&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在现代并发编程领域，数据竞争和内存可见性问题如同潜伏的暗礁，随时可能让程序触礁沉没。Rust语言通过独特的所有权系统和原子类型为开发者提供了强有力的安全保障，但真正掌握其并发编程精髓的关键在于深入理]]></description><author>Rust开发笔记</author><pubDate>Fri, 28 Feb 2025 19:12:29 +0800</pubDate></item><item><title>【文末赠书】网络运维更简单、更高效的宝藏</title><link>http://mp.weixin.qq.com/s?__biz=MzkyMzYxNTUwMw==&amp;mid=2247489434&amp;idx=1&amp;sn=e0b424ba8078c11bb45c8632cd1fbd19&amp;chksm=c00214220b78ae1494fec49c3719b67700b9cdb801880c5e95d313c18dcf8160a5b529ff0f10&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[想象一下，在一个风和日丽的下午，你的关键业务系统突然开始上演“慢动作”大片，系统的响应时间开始变长，用户反馈频繁出现卡顿，大多数人以为这只是暂时的网络波动，但随着时间的推移，问题不仅没有缓解，反而愈演]]></description><author>Rust开发笔记</author><pubDate>Thu, 27 Feb 2025 11:52:34 +0800</pubDate></item></channel></rss>