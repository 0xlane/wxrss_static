<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>疯狂打码中</title><link>https://wxrss.reinject.top/dfe64057c0126a920d43ce6fce198178/</link><description>An RSS feed.</description><language>zh-cn</language><lastBuildDate>Sun, 26 Oct 2025 03:32:53 +0800</lastBuildDate><generator>wxrss -- https://github.com/0xlane/wxrss</generator><item><title>发现问题，解决问题，复盘问题</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488908&amp;idx=1&amp;sn=f66d2f0be876a896e9aa7e4e58a8ad3b&amp;chksm=fb7f5700b57af18f3da02ab3462e9004aef3154413b4d2f482d4eab18c63dedc6ba1594bd654&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在探讨领导力这一复杂而多维的话题时，我们首先需要明确，领导力的产生并非单一因素作用的结果，而是多种力量交织的产物。其中，职位权力、专业权威以及个人魅力等，都是构成领导力不可或缺的要素。然而，在此我们特]]></description><author>疯狂打码中</author><pubDate>Wed, 30 Jul 2025 09:42:20 +0800</pubDate></item><item><title>存储管理</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488901&amp;idx=1&amp;sn=6f55885a5f14b9161fa55a063dec160a&amp;chksm=fbbd10efb8afdbac8f515584fd7eede40d05e2a69ca6176fd8a5a257f29833a9bb2089dd55d0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[存储管理冯·诺依曼体系架构奠定了现代计算机的基础，其核心由五大部件构成：运算器（执行算术与逻辑运算）、存储器（存储数据与指令）、输入/输出设备（完成人机交互）、控制器（协调指令执行流程）。这一架构明确]]></description><author>疯狂打码中</author><pubDate>Tue, 29 Jul 2025 21:13:07 +0800</pubDate></item><item><title>Java新特性中的Preview功能如何运行和调试</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488716&amp;idx=1&amp;sn=0dbc015d26aef5c3f8638c99fae8a91a&amp;chksm=fb6c094d7e6ba2214294d1ad268685c027367b9d2c8bf161f8b74b8306d16dd4785a25a10629&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在每个Java新版本发布的特性中，都会包含一些Preview（预览）功能，这些功能主要用来给开发者体验并收集建议。所以，Preview阶段的功能并不是默认开启的。如果想体验某个Java版本中的Prev]]></description><author>疯狂打码中</author><pubDate>Fri, 11 Jul 2025 14:19:59 +0800</pubDate></item><item><title>JEP之间的关系</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488715&amp;idx=1&amp;sn=16b5f69634448a879e3958b7a406835e&amp;chksm=fbb0f809826c7b1bffffb5cd1a94d55e5c13eacb898d6a08eee09c157843ae629bdb7eb65967&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在JDK开发体系中，JEP（Java Enhancement Proposal）作为核心特性提案机制，其「Relates to」字段通过明确技术关联关系，构建了特性演进的依赖图谱。该字段不仅反映技术实]]></description><author>疯狂打码中</author><pubDate>Thu, 10 Jul 2025 14:22:24 +0800</pubDate></item><item><title>JDK新特性生命周期的管理</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488714&amp;idx=1&amp;sn=95c44f334979019fdc588213f30ffc79&amp;chksm=fb55c1ff6f7ddc77a4f5e9e7ae2bbcfe8c15465ac379ef0a259b6bb6dffaf2d8318410f3cf1a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[JDK新特性生命周期管理规范JDK新特性生命周期管理规范旨在明确不同阶段技术特性的管理规则，帮助开发者合理评估和采用新特性。以下是各阶段特性的详细说明：一、实验性特性（Experimental）核心特]]></description><author>疯狂打码中</author><pubDate>Wed, 09 Jul 2025 07:43:12 +0800</pubDate></item><item><title>关于中台的思考</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488694&amp;idx=1&amp;sn=65ebf20164461188c32cd7aeb7cf1f2c&amp;chksm=fb31623b68b993ea0b647d1daf682dbf80ade5d907025dc84b9f50ad2239a331fc8b42864403&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[关于中台的思考在当今企业数字化发展的进程中，中台建设成为了备受关注的焦点话题。我们深入探讨中台时，需要明确我们究竟要解决哪些核心问题，归结起来，主要涵盖业务、技术以及人这三个关键层面。从技术层面来看，]]></description><author>疯狂打码中</author><pubDate>Mon, 07 Jul 2025 07:28:44 +0800</pubDate></item><item><title>33. 面试必问之 Java 常见线上故障排查方案详解</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488693&amp;idx=1&amp;sn=e30ec1b28f80188ab3a482d4c80984e6&amp;chksm=fbda73f34f1988579312ef035e8b126c7bd5bd2df0422a0569ba766f6b9306b188a9f147adb6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在软件开发这一复杂且精细的流程中，排查并修复产线问题无疑是每位工程师都必须牢牢掌握的基础技能，这是保障软件稳定运行、满足用户需求的关键环节。然而，生产环境犹如一个充满变数的战场，程序代码中可能潜藏着未]]></description><author>疯狂打码中</author><pubDate>Sun, 06 Jul 2025 11:12:12 +0800</pubDate></item><item><title>项目跟进的反思</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488684&amp;idx=1&amp;sn=3229dcf656ed551c24ab843fa7b5863f&amp;chksm=fbf9e19c6c70b8b63a816f01a99835662486da1225dc0d71c2364eef9d526cf0b7ed684412c3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在项目推进的整个生命周期中，每个环节都紧密相连且至关重要，对项目跟进过程进行全面反思，有助于总结经验教训，提升未来项目管理的水平与质量。一、需求的确立需求是项目的基石，精准且合理的需求确立是项目成功的]]></description><author>疯狂打码中</author><pubDate>Sat, 05 Jul 2025 07:41:28 +0800</pubDate></item><item><title>3.Rocket主从同步配置与刷盘策略</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488638&amp;idx=1&amp;sn=5d01f705c3c68a7c61e3868cbd6e4d21&amp;chksm=fb23ffc75d951feaf67790fc5d99dbbd8a97e7072006d864d17826b9227094a5e368f32b53b3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.0 RocketMQ 主从配置同步详解brokerRole 配置SYNC_MASTER（同步主从模式）在同步模式下，Master 与 Slave 之间的数据同步要求极为严格，旨在确保消息几乎不丢失]]></description><author>疯狂打码中</author><pubDate>Fri, 27 Jun 2025 08:03:32 +0800</pubDate></item><item><title>2.为什么选择RocketMQ?</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488637&amp;idx=1&amp;sn=760b9d44e0875453545d3fbb0381684d&amp;chksm=fb42a843ff7d0248baf2b8133c6d7b6923b0fc2fe6bee2fbc50e44727af8da55bbb4188dbc13&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[选择 RocketMQ 的原因选择 RocketMQ 十分简单，其基于 Java 语言开发这一特性优势显著。对于开发者而言，Java 语言的广泛使用和丰富的文档资源，使得 RocketMQ 的源码阅读]]></description><author>疯狂打码中</author><pubDate>Thu, 26 Jun 2025 20:43:00 +0800</pubDate></item><item><title>关公战秦琼</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488629&amp;idx=1&amp;sn=972c16129b86f2f9a4c5197b96e4cc98&amp;chksm=fba80d5a308a6f0ca0db0772dcca8d52014f29b065cc851a247b51b6c40bb18e82b72e48a128&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[]]></description><author>疯狂打码中</author><pubDate>Wed, 18 Jun 2025 21:29:35 +0800</pubDate></item><item><title>一位失足妹子的自述</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488627&amp;idx=1&amp;sn=8849953765ab76ddf4fb06ec422c588b&amp;chksm=fb23fc1182be7564ea35072479d3a49ccaa6ea2244cd21a0a40f9fcfa3e04bc3bc174f63594c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[有幸也不幸的认识了一个女孩子，因为是老乡的缘故，成为了好朋友，熟识之后，才了解到，原来她是一位失足妹子。对于她的经历，我要写出来，尽量作为客观陈述，好恶自评。不妨叫这位妹妹为小晴。 小晴是那种你一眼就]]></description><author>疯狂打码中</author><pubDate>Sun, 15 Jun 2025 11:52:00 +0800</pubDate></item><item><title>17.RocketMQ之死信队列</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488560&amp;idx=1&amp;sn=417227e059b30232edc7be10cb37bfb2&amp;chksm=fb7847b87950172538eef47d17907c0c54f6a5204616dcff0adc94600d5341e0b6896dd4bb77&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[1.5 死信队列当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 RocketM]]></description><author>疯狂打码中</author><pubDate>Sun, 01 Jun 2025 20:47:53 +0800</pubDate></item><item><title>视频动画跟进笔记</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488539&amp;idx=1&amp;sn=e1df196b8c01e321df6fc7b196f30d99&amp;chksm=fb04c4df5feccd9a0eb2b3d99a517bfde4c1b79ff7e70c71510cdfea85a897497a8662697171&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[视频动画跟进笔记动画修改意见流程文案脚本：审核文案脚本内容是否准确无误，是否契合客户标准。三维模型：评估模型能否精准呈现文案描述，画面质量是否达到预期要求。动画预演：检查动画节奏、转场等是否与主题相符]]></description><author>疯狂打码中</author><pubDate>Fri, 30 May 2025 16:23:24 +0800</pubDate></item><item><title>我的第一个小程序</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488528&amp;idx=1&amp;sn=5e5d824f01a3f90e0dc8473610cf1958&amp;chksm=fbcb5978c9f240d1b34d4fb8eb33400b968094f44c7b29b48f88181cb41875f55082e7dbd0b5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、第一个微信小程序AI智绘魔方目前功能相对简单，只要一个 跟进城市天气生成 图片和文案的ai小程序。第二个页面因为ai生成的慢，还需要等待一段时间才能生成。下一步的目标：希望能够基于 微信公共号的]]></description><author>疯狂打码中</author><pubDate>Mon, 26 May 2025 09:52:09 +0800</pubDate></item><item><title>40.RocketMQ之高频面试题大全</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488523&amp;idx=1&amp;sn=cdd589ef276d2540fda2c8da9c1092d0&amp;chksm=fb62ca3c34fcf25d25199c1df78ab640839e04761a3ff7366a423a331d272ace2e80e73d32b0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[消息中间件如何选型在本文中，之所以推荐 RocketMQ，主要是因为它是用 Java 语言开发的，相关的源代码我能够深入研读理解，而其他中间件的推荐更多是基于结果进行阐述。RabbitMQRabbit]]></description><author>疯狂打码中</author><pubDate>Sat, 24 May 2025 13:05:39 +0800</pubDate></item><item><title>20.RocketMQ之消息积压与处理消息积压</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488519&amp;idx=1&amp;sn=f4a21caf46e359afb554403aaa91919e&amp;chksm=fb62cfcdb9dc72792bcde0c3640fd16dc06779f1895933d3a59ca7ce137049362aa58b36825b&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[消息挤压的处理，是必须面对的问题，最好是能够建立监控机制，发现是那个大ka的挤压，进行特殊化处理。保证其余客户的正常处理。一般请求，能够做到 队列的扩容，新消息能够及时消费，老消息逐步消费即可。但是要]]></description><author>疯狂打码中</author><pubDate>Fri, 23 May 2025 15:27:15 +0800</pubDate></item><item><title>Spring Boot</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488518&amp;idx=1&amp;sn=eaa7222ade0e9ba82758171f87c0d471&amp;chksm=fb6633c113d92106806f403a105696021eb094ce0d9e213dc64f7a8652627cbbb81befb33878&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[11. Spring Boot11.1 Spring Boot简介{{Spring Boot 基于 Spring 框架进行开发，不过，Spring Boot 本身并不提供 Spring 框架的核心特性]]></description><author>疯狂打码中</author><pubDate>Thu, 22 May 2025 05:40:39 +0800</pubDate></item><item><title>4.消息发送之同步消息、异步消息、单向消息</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488511&amp;idx=1&amp;sn=1947032725563152ba7857e22837ca30&amp;chksm=fbe9c972e10964a44321ef3ec731f11504de3e0e4334308a9d13cec04ccfebf1cb5f63ae5f21&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[前言：这是一篇单纯介绍 消息发送 的 入门接入的文章。建议查看最新的文档。4.1 消息发送基本样例导入rocketmq-demo导入MQ客户端依赖<dependency>    <groupId>or]]></description><author>疯狂打码中</author><pubDate>Wed, 21 May 2025 14:47:30 +0800</pubDate></item><item><title>5.消息消费模式与拉取模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488507&amp;idx=1&amp;sn=fda7c6c0ebbcd0656c6163d8d4142fc7&amp;chksm=fb9946d3901fdb3443ce90758edcd41f8da1d94ecf33fde61a3aed61745e1817118216c7a98e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.1.2 消费消息模式1）负载均衡模式（默认）同一消费者组：在同一个消费者组（Group）中，能确保一条消息仅会被该组内的一个消费者所消费。也就是说，同一组内的多个消费者会共同消费队列中的消息，但每]]></description><author>疯狂打码中</author><pubDate>Sat, 17 May 2025 20:55:33 +0800</pubDate></item><item><title>19.RocketMQ之消息丢失的场景以及解决方案</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488503&amp;idx=1&amp;sn=0ead6e9538bffad38fad3a12978d3cc9&amp;chksm=fbef2b50bad61930ec417099aea54bd163b6de1739d6dd65f150357e456138f64286e75f9e08&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[消息的丢失和消息的补偿消息的丢失在三个环节，发送环节，消息的存储环节，消息的消费环节。消息既然存在丢失的可能，就需要有补偿措施。消息的防丢失和消息的补偿措施，都会增加系统的复杂度，然后带来性能的损耗。]]></description><author>疯狂打码中</author><pubDate>Wed, 14 May 2025 21:57:12 +0800</pubDate></item><item><title>8.批量消息发送与批量消息消费</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488498&amp;idx=1&amp;sn=91ccbb770b49481d1966a3487d10c631&amp;chksm=fb7530f26a4f850fbc1f6ad0a4c572e00b1aa9d71a98d6406bfdc4940c27504960e18aad7eaa&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.4 批量消息4.4.1 发送限制生产者进行消息发送时可以一次发送多条消息，批量发送消息能显著提高传递小消息的性能。不过需要注意以下几点：批量发送的消息必须具有相同的Topic批量发送的消息必须具有]]></description><author>疯狂打码中</author><pubDate>Sat, 10 May 2025 09:11:24 +0800</pubDate></item><item><title>6.顺序消息的发送与消费</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488494&amp;idx=1&amp;sn=20611dea9e084b8f7c4efb7798921fdf&amp;chksm=fb1cb99ceb760ed2a4b618f03a95c2a663293123578afdd10a47c4146d0274605581929e3225&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.2 顺序消息消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序。顺序消费的原理解析，在默认的情况下消息发送会采取Round]]></description><author>疯狂打码中</author><pubDate>Thu, 08 May 2025 11:30:32 +0800</pubDate></item><item><title>写公众号的阶段性总结</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488490&amp;idx=1&amp;sn=9c92e09d6566e79376b71ef4897cacaf&amp;chksm=fb95aac20ddb810382a9ec2226b45b51684d94bec47c6d99f42afccc80e990a8ef428935e5a0&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[尝试，用于尝试，在评估成本的情况下进行尝试。希望大家多折腾点不同的东西，说不定就会有意外之喜。 1、公众号的尝试。    最近一年，对曾经收集的各路技术文章，进行整理后发布，收获了上千的关注。但是仔细]]></description><author>疯狂打码中</author><pubDate>Wed, 07 May 2025 15:33:25 +0800</pubDate></item><item><title>9.延迟消息发送与延迟消息实现探究</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488484&amp;idx=1&amp;sn=fccf2d398c4ecc709d703d9a3f69fd5a&amp;chksm=fbebb402d952202a0b8d2a4c713da65e55d470b1d1cf689be8d59dc8b059bf1909cfb0ae8bd7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.3 延时消息延时消息所对应的 Topic 为 SCHEDULE_TOPIC_XXXX。在此特别强调，这里的 SCHEDULE_TOPIC_XXXX 中的 XXXX 并无特定含义，并非指代某某某。S]]></description><author>疯狂打码中</author><pubDate>Fri, 02 May 2025 13:35:41 +0800</pubDate></item><item><title>34.[线上问题排查] 线上的 API 接口响应比较慢，该如何快速排查和定位问题？</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488480&amp;idx=1&amp;sn=89f083d4d81962b78ac731521a387190&amp;chksm=fbaf270fe089c99a38610006a668eae9d4727ffaa2c4bf3f5dc2c6f4b9db98c5fc895945a5df&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[34.1 定位问题34.1.1 慢查询日志通常情况下，为了定位 sql 的性能瓶颈，我们需要开启 mysql 的慢查询日志。把超过指定时间的 sql 语句，单独记录下来，方面以后分析和定位问题。开启慢]]></description><author>疯狂打码中</author><pubDate>Tue, 29 Apr 2025 11:13:12 +0800</pubDate></item><item><title>建造者模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488476&amp;idx=1&amp;sn=4b3d7df2732a7f8ae665234ef91ae65e&amp;chksm=fb42736e106566ad3de041b190c421d3870f562b0a7a54a3dc8d578ce75173ac7d6c40ccc4a5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[建造者模式的应用场景主要解决在软件系统中，有时候面临着 “一个复杂对象” 的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组]]></description><author>疯狂打码中</author><pubDate>Mon, 28 Apr 2025 10:21:36 +0800</pubDate></item><item><title>原型模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488470&amp;idx=1&amp;sn=abdf38925daef581950c31be2fa7bbd2&amp;chksm=fb086b461d4fc4a597ddf8855d78bae54c7ed9dec3f63d7a8e8a6e3016560294dd40df831fa6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[介绍意图：通过原型实例来指定待创建对象的类型，并借助对这些原型的复制操作来生成新的对象。关键代码：实现克隆功能：在 Java 中，通过实现 Cloneable 接口并重写 clone() 方法来实现；]]></description><author>疯狂打码中</author><pubDate>Sat, 26 Apr 2025 07:36:16 +0800</pubDate></item><item><title>设计模式总结</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488469&amp;idx=1&amp;sn=b92d15e147b1bdde0c2da20c7b741698&amp;chksm=fbc8b233ca79e716a4350c82880cbdb18f59d6a5725bc8b3ce185015b41f9726a4539247bc18&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[设计模式总结1、现在的ai非常强大，能够基于固有的知识进行总结，而且会有很多出人意料的知识，本系列大部分都是ai总结，目前看反馈一半，但是知识点相对够用。2、设计模式不是银弹，不能解决所有的问题，却是]]></description><author>疯狂打码中</author><pubDate>Fri, 25 Apr 2025 07:12:33 +0800</pubDate></item><item><title>10.事务消息</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488459&amp;idx=1&amp;sn=d73316fd88011f16aa575a9368eb3c03&amp;chksm=fb2c16cd6fbb7fbf0ee7a036cf5ea37bc2560dd4fd8d3673cb2f7c6423a27871db713f9330dd&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[4.6 事务消息4.6.1 流程分析上图说明了事务消息的大致方案，其中分为两个流程：正常事务消息的发送及提交、事务消息的补偿流程。1）事务消息发送及提交(1) 发送消息（half消息）。(2) 服务端]]></description><author>疯狂打码中</author><pubDate>Thu, 24 Apr 2025 08:36:48 +0800</pubDate></item><item><title>42. [线上问题排查]如果 JVM 出现频繁 FullGC该如何解决</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488455&amp;idx=1&amp;sn=a618f06a7ca9318805c293570587d525&amp;chksm=fb2ffffb249b10a07d81c8f8a9e9032a543ad52ae803eafb557bb85cfa01885ddc4d1e0d833a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[我们知道 Full GC 的触发条件大致情况有以下几种情况：1. 程序执行了 System.gc() //建议 jvm 执行 fullgc，并不一定会执行2. 执行了 jmap -histo:live]]></description><author>疯狂打码中</author><pubDate>Wed, 23 Apr 2025 21:13:40 +0800</pubDate></item><item><title>中介者模式：如何解耦复杂系统</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488452&amp;idx=1&amp;sn=eb095be08b43394b73c66a9c7495c6e8&amp;chksm=fb6fde35897011aa1eedfcc3215957d3d1614433cd834308dfdfc21b5541837a2f22582a2069&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、系统耦合的困境在软件开发中，我们经常会遇到这样的场景：多个对象之间需要进行复杂的交互，彼此之间形成网状依赖关系。这种高度耦合的系统就像一团纠缠的电线，任何改动都可能引发连锁反应。典型症状包括‌：]]></description><author>疯狂打码中</author><pubDate>Tue, 22 Apr 2025 08:14:50 +0800</pubDate></item><item><title>设计模式中的 Observer Pattern（观察者模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488449&amp;idx=1&amp;sn=d546ce3aa2adc776b0b3e25941f7bdc2&amp;chksm=fb096b0c96ad4a08a2067b452d3335da5678c0f0e4771dabbdd77eaa5ce1232503244d2b70c2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、引言在软件开发中，我们经常需要处理对象之间的依赖关系，尤其是当一个对象的状态发生变化时，需要通知其他对象进行相应的更新。为了解决这个问题，设计模式中的观察者模式（Observer Pattern）]]></description><author>疯狂打码中</author><pubDate>Mon, 21 Apr 2025 08:21:40 +0800</pubDate></item><item><title>设计模式中的 State Pattern（状态模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488448&amp;idx=1&amp;sn=c144d270a853f4288bd4b967dd99d052&amp;chksm=fb9f1582c7bb5d619e99166c5e2962f7621eb7e20e9e8065700c2d9c54e69ea3120325ff8a11&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[状态模式（State Pattern）是一种行为型设计模式，它允许对象在内部状态改变时改变其行为。这种模式通过将对象的状态和行为封装成不同的状态类，使得对象的行为与其状态相关联，进而避免了状态条件判断]]></description><author>疯狂打码中</author><pubDate>Sun, 20 Apr 2025 11:40:18 +0800</pubDate></item><item><title>Memento Pattern（备忘录模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488447&amp;idx=1&amp;sn=71dc4d1aefac425671a7013beee69004&amp;chksm=fbd52c388132408c072ff90a60bd3279d764a8e9a17d320721dd524bae8e1ec2489657147773&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[备忘录模式（Memento Pattern）是一种行为型设计模式，在软件开发中扮演着至关重要的角色。它提供了一种在不破坏对象封装性的前提下捕获和恢复对象内部状态的有效机制。本文将深入探讨备忘录模式的核]]></description><author>疯狂打码中</author><pubDate>Sat, 19 Apr 2025 09:06:06 +0800</pubDate></item><item><title>设计模式中的 Strategy Pattern（策略模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488446&amp;idx=1&amp;sn=6e8b73d49e185ee33e945967763ae378&amp;chksm=fb4ac79456185db133f2f125c99e3a8062862de2087f2acfddf088a7955493c0f1f69bbbe1d7&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、引言在软件开发中，我们经常遇到需要根据不同情况选择不同算法或行为的场景。例如，在电商系统中，可能需要根据不同的促销策略来计算订单的总价；在游戏中，可能需要根据不同的角色或场景来执行不同的攻击方式。]]></description><author>疯狂打码中</author><pubDate>Fri, 18 Apr 2025 09:10:14 +0800</pubDate></item><item><title>设计模式中的 Template Method Pattern（模板方法模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488445&amp;idx=1&amp;sn=dc503da73547c7657242c845852f9441&amp;chksm=fb97f8e113d893b12ebf7ef4b265907b0af9d32daad06b6d3b7cc0b98af737da4cd01aaf60e4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、引言在软件开发领域，设计模式是一种经过实践验证的解决方案，用于解决常见的软件设计问题。模板方法模式（Template Method Pattern）是行为型设计模式的一种，它定义了一个算法的骨架，]]></description><author>疯狂打码中</author><pubDate>Thu, 17 Apr 2025 15:39:48 +0800</pubDate></item><item><title>设计模式深度解析：Visitor Pattern（访问者模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488444&amp;idx=1&amp;sn=1e1346de466713cc7e3e668bc84579f5&amp;chksm=fb854e064cc4eb8342a5b27eaa468fec389903a43f8c3b65bbf4a13b63576df0f92cd1553ed1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、为什么需要访问者模式？在软件开发中，我们经常会遇到需要对复杂对象结构中的元素进行多种操作的场景。例如：对一个文件系统中的不同文件类型（文本、图片、视频）执行统计、加密、压缩等操作。对编译器中的抽象]]></description><author>疯狂打码中</author><pubDate>Wed, 16 Apr 2025 07:58:31 +0800</pubDate></item><item><title>中介者模式：如何解耦复杂系统</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488418&amp;idx=1&amp;sn=50c9d2ca43137dc6b4204ff69d41ac76&amp;chksm=fb0d3a16e4a11c379de6df5f813c7b8f1ef4cc4dfbeb0cfd608bebdf2a2cbf679c926074edf9&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、系统耦合的困境在软件开发中，我们经常会遇到这样的场景：多个对象之间需要进行复杂的交互，彼此之间形成网状依赖关系。这种高度耦合的系统就像一团纠缠的电线，任何改动都可能引发连锁反应。典型症状包括‌：]]></description><author>疯狂打码中</author><pubDate>Tue, 15 Apr 2025 09:39:09 +0800</pubDate></item><item><title>解释器模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488412&amp;idx=1&amp;sn=b184b4bddd6fb6bb317868687ddb5b91&amp;chksm=fbcb2f632d403974441777f0a182b76c1c04bf6e91c0609d7bb2ccf80a1dc765405f09675718&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：当代码需要"听懂"规则在软件开发中，我们经常会遇到需要解析特定语法规则的场景：比如金融系统中的交易规则引擎、电商平台的促销规则解析、OA系统的审批流程配置等。这时候，解释器模式（Interpre]]></description><author>疯狂打码中</author><pubDate>Sat, 12 Apr 2025 09:56:47 +0800</pubDate></item><item><title>Java命令模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488407&amp;idx=1&amp;sn=3fa9f7b4de504124b69725358448d708&amp;chksm=fb6797d5131785a2318f5ce4670c97efc29304cac8f960fbd3485e8478d46a423d51e125ff7c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、模式起源与现实痛点在软件工程领域，命令模式诞生于图形界面开发需求激增的90年代初期。当用户界面需要支持撤销/重做、宏命令、事务处理等功能时，传统的直接调用方式暴露出严重缺陷：界面代码与业务逻辑高]]></description><author>疯狂打码中</author><pubDate>Fri, 11 Apr 2025 08:48:39 +0800</pubDate></item><item><title>责任链模式实战全解析</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488402&amp;idx=1&amp;sn=7e8ecb914cf9acd696f8e80e9bdeed88&amp;chksm=fbfcd2e0143b3898dfc563513ce6a40e0c4ffbdca1be5b3501b29b0f0b888059ea53eda833c4&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、模式本质：用"流水线思维"重构复杂逻辑1.2 代码中的典型坏味道反例：多层嵌套if-else// 典型的流程耦合代码public void process(Request req) {    if]]></description><author>疯狂打码中</author><pubDate>Thu, 10 Apr 2025 20:59:32 +0800</pubDate></item><item><title>Java设计模式实战：迭代器模式详解与代码示例</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488243&amp;idx=1&amp;sn=42f9e70d8323382b1a92c6e4aed76e52&amp;chksm=fb8bad9bf33e94239bce403d126c551b827b7be88bd911107f983f7dd8a226020bfed92ea112&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[主题内容：迭代器模式是什么？核心思想： 迭代器模式（Iterator Pattern）提供一种统一且高效的方式，遍历聚合对象（如集合、列表、树形结构）中的元素，而无需暴露其内部结构。它将遍历逻辑与数据]]></description><author>疯狂打码中</author><pubDate>Wed, 09 Apr 2025 15:10:41 +0800</pubDate></item><item><title>程序员的成长</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488238&amp;idx=1&amp;sn=3e6e9ba75fb69ce0973127ae8fb5c665&amp;chksm=fb016bdb8bbd7cf6f2d0510225dafd1b13794282cee25b60356b43570287046ad2ae078b454a&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[对于程序员而言，存在一个普遍的误解，那就是认为技术高超便是至高无上的。这种观念与公司究竟是技术驱动还是业务驱动的争论息息相关。首先要明确的是，重大的技术革新和基础性研究，在中小规模的公司中几乎是难觅踪]]></description><author>疯狂打码中</author><pubDate>Tue, 01 Apr 2025 11:26:11 +0800</pubDate></item><item><title>转载：回三线老家工作的总结</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=1&amp;sn=7aab3e15cee6c357dfc9769e67d5b9cc&amp;chksm=fbadc0067cdd02580bfb091e42dcdebd7c21f232548288d4876a764cfb7f7ae698bd9f76afa2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[前言大城市无处安身，家乡无处安放灵魂。人到中间，曾经鄙视的各种现象，开始在自己身上重现，唯一能做的就是和自己和解，承认自己的平庸，安心过好每一天。转眼间，回老家工作已经满一年光景，这一年的经历真是五味]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>桥接模式（Bridge Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=2&amp;sn=baa7ee059492bdd68bde5f4929d68cff&amp;chksm=fb771e93386a928dc82bbeda0e5ef4a6de954ca15a24b2f7ba1450897b56b72e1bad60bd66f6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发中，设计模式是一种被广泛使用的方法，用于解决常见的设计问题。桥接模式（Bridge Pattern）作为一种结构型设计模式，它通过将抽象部分与实现部分分离，使它们可以独立变化，从而提高了]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>装饰者模式（Decorator Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=3&amp;sn=f5a1ef86589b3d0acc239b84bd92dcb4&amp;chksm=fb6bfa45bf4029bf88bdd0542cb2e31cd58eb068b395af1bd00842718d9b9724a90e4e60aa55&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发领域，设计模式是解决常见设计问题的经典方案，它们为开发者提供了可复用的设计思路。其中，装饰者模式（Decorator Pattern）作为一种结构型设计模式，以其独特的动态扩展功能的能力]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>Façade Pattern（外观模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=4&amp;sn=b422a7bb6474c75206ef62b7217f5b35&amp;chksm=fb915c706858fb4ffbc66be9bcbe1aa0fc6461c3fe6be0b1a7a3d1fa59b0ff3b41020bddb442&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发的广袤天地里，设计模式如同璀璨的星辰，为开发者指引着高效、优雅编码的方向。其中，Façade Pattern（外观模式）以其独特的魅力，在众多设计模式中脱颖而出。它就像是一位贴心的管家，]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>Composite Pattern（组合模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=5&amp;sn=2e31a1f4c53c1f05d6e2bc7e25748504&amp;chksm=fb0f065d115faba3369c3999b81fa67c6ec8133161e12e2b284e8250d71708fb0eebbf93f7ab&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[树形结构的艺术：组合模式构建层次化系统引言：从宇宙结构到代码架构（约800字）1. 自然界的组合奥秘分形几何中的自相似性：罗马花椰菜的递归结构社会组织形态的层次化：国家→省→市→区的行政划分计算机科学]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>享元模式（Flyweight Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=6&amp;sn=3b09ed9d1441808063dfc6445d2065b2&amp;chksm=fbd077fd934bf9b6cbc96aa282a39400cc5f3d8348c9ec06ec3f5c529ccd7ce640f2d4796cae&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：从活字印刷到对象复用（约800字）1. 历史中的共享智慧北宋活字印刷术：可重复使用的字模设计现代集装箱运输：标准箱体适配不同货物快餐连锁的原料预制：核心食材统一供应体系2. 软件工程的内存困境某]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>Proxy Pattern（代理模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=7&amp;sn=070a37237ab766e0fd41c7c170996f37&amp;chksm=fb23961b51bc9126e0168b264c2665a80531ed4ce4629df7f5926916150824c92be4d2fbb314&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发的广袤领域中，设计模式犹如璀璨的星辰，为开发者指引着构建高效、灵活且可维护系统的方向。其中，Proxy Pattern（代理模式）以其独特的功能和广泛的应用场景，成为了众多开发者手中的得]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>工厂方法模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488234&amp;idx=8&amp;sn=d3ca64b2839bc1aa0e89d9ea874bf6c4&amp;chksm=fb008237e74ceb1e358638fe55155b9dd02846063aa0a5a1fe2e75cb3456e20e178ab69e850c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：从手工作坊到智能流水线（约800字）1. 生产革命的启示福特流水线的创新：标准化零件与组装分离快餐连锁的中央厨房：配方与制作的解耦软件开发的依赖困境：new操作符的紧耦合陷阱2. 电商平台的支付]]></description><author>疯狂打码中</author><pubDate>Sun, 30 Mar 2025 08:58:07 +0800</pubDate></item><item><title>适配器模式的设计哲学</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488227&amp;idx=1&amp;sn=07ecb5bbe243bdbc92472cafd3594bed&amp;chksm=fb215711dd58f5a93d5f98ed22500a0748fe154a212517c060cfe032c957322e980fae59e5d1&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：无处不在的适配思维物理世界的适配智慧当我们带着中国制造的电器踏上欧洲土地，第一个需要解决的问题往往是一个不起眼的电源转换器。这个小小的装置将220V的欧标插头转换为110V的美标接口，让不同制式]]></description><author>疯狂打码中</author><pubDate>Sat, 29 Mar 2025 13:41:41 +0800</pubDate></item><item><title>41. [线上问题排查]MQ 消息队列消息堆积问题排查和解决思路</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488226&amp;idx=1&amp;sn=8ae6b01fc3a31ec315d91f0002fd9847&amp;chksm=fbebdc9af42194f84b1f9baed7c74557f5f50230202cfdd5b676721cbeffcea1cefc57ff8d69&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[]]></description><author>疯狂打码中</author><pubDate>Sun, 23 Mar 2025 07:47:05 +0800</pubDate></item><item><title>适配器模式的设计哲学</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=1&amp;sn=b85ae2a29808ba90949665f1d9b9659a&amp;chksm=fba69567e515495cf8dbad72d17d0055753c1281da054761d46be0047b21fe3e5fec2af3d230&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：无处不在的适配思维（约650字）物理世界的适配智慧当我们带着中国制造的电器踏上欧洲土地，第一个需要解决的问题往往是一个不起眼的电源转换器。这个小小的装置将220V的欧标插头转换为110V的美标接]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>桥接模式（Bridge Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=2&amp;sn=479dfe1e700f3006e8f780b01983601c&amp;chksm=fb53848f1383ef9a96bffd6ea4eed8e74ceeccf687c989d771866a0234d89c00033f4971a9b3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发中，设计模式是一种被广泛使用的方法，用于解决常见的设计问题。桥接模式（Bridge Pattern）作为一种结构型设计模式，它通过将抽象部分与实现部分分离，使它们可以独立变化，从而提高了]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>装饰者模式（Decorator Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=3&amp;sn=b409c8d476080af9f6e3ba557f20cf10&amp;chksm=fb5125695026ea97672127f61a8cf5b31e43cd67ac11e32d5b002951c054fe54a99320697990&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发领域，设计模式是解决常见设计问题的经典方案，它们为开发者提供了可复用的设计思路。其中，装饰者模式（Decorator Pattern）作为一种结构型设计模式，以其独特的动态扩展功能的能力]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>Façade Pattern（外观模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=4&amp;sn=26d4040d4f420ee0ec16ca811e553914&amp;chksm=fb8226f2641fb23b3685677e3329f6bf35c645ab9815551d99e4d33d4f11d0cb2e01ee4279f3&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发的广袤天地里，设计模式如同璀璨的星辰，为开发者指引着高效、优雅编码的方向。其中，Façade Pattern（外观模式）以其独特的魅力，在众多设计模式中脱颖而出。它就像是一位贴心的管家，]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>Composite Pattern（组合模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=5&amp;sn=82f85a1822c337dbb8f440c388fcc8e7&amp;chksm=fb2a86956e5816755d81dc24c077be9ab2355224ee2e29fa33477cf15eaac7d3d68de0111d02&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[树形结构的艺术：组合模式构建层次化系统引言：从宇宙结构到代码架构（约800字）1. 自然界的组合奥秘分形几何中的自相似性：罗马花椰菜的递归结构社会组织形态的层次化：国家→省→市→区的行政划分计算机科学]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>享元模式（Flyweight Pattern）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=6&amp;sn=23ab637fe6cabf98d1b6111fd5bd4639&amp;chksm=fb29d0f03e3b38f3d85130b22f08db2a1bfa8130978b488c371240f57a7b44a4d73d45c93ce2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：从活字印刷到对象复用（约800字）1. 历史中的共享智慧北宋活字印刷术：可重复使用的字模设计现代集装箱运输：标准箱体适配不同货物快餐连锁的原料预制：核心食材统一供应体系2. 软件工程的内存困境某]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>Proxy Pattern（代理模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=7&amp;sn=2c9060299bf74170b7c8839809729b04&amp;chksm=fbd07f26c1c530d3b6c82881016609d7c2d1a9900759362216991201e62630afdfb4107ef4ff&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言在软件开发的广袤领域中，设计模式犹如璀璨的星辰，为开发者指引着构建高效、灵活且可维护系统的方向。其中，Proxy Pattern（代理模式）以其独特的功能和广泛的应用场景，成为了众多开发者手中的得]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>工厂方法模式</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488221&amp;idx=8&amp;sn=a6b3bb51a5581aef5960e075c9228126&amp;chksm=fb919f9060991642418a6c800e06f9d06a1412df874d1eba0ae9acbbd5ccd05e953999a05d66&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[引言：从手工作坊到智能流水线（约800字）1. 生产革命的启示福特流水线的创新：标准化零件与组装分离快餐连锁的中央厨房：配方与制作的解耦软件开发的依赖困境：new操作符的紧耦合陷阱2. 电商平台的支付]]></description><author>疯狂打码中</author><pubDate>Sat, 22 Mar 2025 10:56:05 +0800</pubDate></item><item><title>设计模式中的 Prototype Pattern（原型模式）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488182&amp;idx=1&amp;sn=dc6bd30efa8919b516925711da24c0df&amp;chksm=fb70c39c82a7a478b497cb533b1c710ddf4a919a94348b3aae5edfade61b6d5773c34dd3858e&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在软件工程中，设计模式是解决常见问题的经典解决方案。设计模式不仅提高了代码的可重用性，还增强了代码的可读性和可维护性。原型模式（Prototype Pattern）是创建型设计模式之一，它通过复制现有]]></description><author>疯狂打码中</author><pubDate>Fri, 21 Mar 2025 08:10:20 +0800</pubDate></item><item><title>工厂模式：Java开发者的对象创建艺术指南</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488177&amp;idx=1&amp;sn=2eeb6e122951495431842ae8fd007c64&amp;chksm=fb07190bda7ca4bb83bc671c93b2e5e0a8bec0937024cded98a5925a2507d63ddb6caad085e2&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[工厂模式：Java开发者的对象创建艺术指南（5000字详解） 引言：为什么需要工厂模式？ 在软件开发的浩瀚星空中，设计模式如同北斗七星般指引着开发者构建高质量的系统。当我们的代码规模从百行级跃升至万行]]></description><author>疯狂打码中</author><pubDate>Thu, 20 Mar 2025 07:47:03 +0800</pubDate></item><item><title>单例模式：设计模式中的“独行侠”</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488168&amp;idx=1&amp;sn=69cb89665e27db5d0663cb2322291b26&amp;chksm=fbfab0afb558f49cf1188faf76dd451ac630cc8cd384e541fee4f6d2879158d9368349bc9a2f&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[单例模式：设计模式中的“独行侠”在软件开发的世界里，设计模式是程序员们的“武林秘籍”，帮助我们在面对复杂问题时，能够迅速找到优雅且高效的解决方案。今天，我们要深入探讨的是一种非常经典且广泛使用的设计模]]></description><author>疯狂打码中</author><pubDate>Wed, 19 Mar 2025 16:42:55 +0800</pubDate></item><item><title>Java 深拷贝 和 浅拷贝 clone</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488159&amp;idx=1&amp;sn=12213ece313808dfe35021dc2f700672&amp;chksm=fb38781b260e48a8050488313cf0f9b42340fef5839a4037cdc7d823316f6c07f621743610f6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[前言配图是 从 公众号上找的。 利用ai 生成了一下文案，发现并不能表达图中之意。有好有的ai绘图，可以推荐。关于Java的深拷贝与浅拷贝简而言之，深拷贝与浅拷贝旨在创建一个与已知对象完全相同的副本。]]></description><author>疯狂打码中</author><pubDate>Tue, 18 Mar 2025 10:52:20 +0800</pubDate></item><item><title>行为价值与架构价值</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488154&amp;idx=1&amp;sn=3ee8cb2d5e1eed4cbc978c875dffbb3d&amp;chksm=fb5cbc09cd201269dc5fac010a9eca84618f1730bf37a494f3128f7f9425dac2775c3895aaa5&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[行为价值与架构价值：软件开发中的双重考量在软件开发的广阔天地里，两大关键维度犹如明灯，照亮着前行的道路：一是行为价值，二是架构价值。对于埋头于代码海洋的普通程序员而言，行为价值如同指引方向的罗盘，揭示]]></description><author>疯狂打码中</author><pubDate>Tue, 11 Mar 2025 20:46:34 +0800</pubDate></item><item><title>消息中间件</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488151&amp;idx=1&amp;sn=a82c89dd7c34082f47fe8ecd4acf44b0&amp;chksm=fb14966e40470dd4b82f99294ec2203607fa09227b9dde2804abe7f69c1c4757dad92e543acb&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[前言对于一个中间件，首先要讨论其存在的价值，就是优点和劣势，使用场景。其次讨论 目前市场存在的产品，其优劣势是什么。明确我们要使用的中间件，接下来就是深入的研究，研究原理，具体的实现方案，常见问题的处]]></description><author>疯狂打码中</author><pubDate>Mon, 10 Mar 2025 11:15:39 +0800</pubDate></item><item><title>大模型按Tokens 收费, 和API调用收费</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488147&amp;idx=1&amp;sn=11dc310a709a34b32672e307c41a0c62&amp;chksm=fbfa24e5dd779e2b20a77f6f49323d82a5e6d78263122df53619970ea30a5937d66306948469&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[什么是Tokens？在自然语言处理（NLP）领域，以及像GPT系列这样的大语言模型中，token扮演着文本数据的基本构成单元角色。一个token，它可以是多种多样的形式：它可能是一个完整的词，比如“a]]></description><author>疯狂打码中</author><pubDate>Fri, 07 Mar 2025 22:34:27 +0800</pubDate></item><item><title>27. MySQL 的局限性</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488139&amp;idx=1&amp;sn=838102221c90e6f5ceedf0c79b93890c&amp;chksm=fbd7110b6bafb99da33384a0e465ed1e3a16ad1fa5311577ef9cae57e5d44941a2210809b71d&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[谈及高并发写入，就不得不提及新兴的分布式数据库HTAP，它巧妙地融合了OLAP与OLTP，能够同步提供数据分析挖掘与关系查询的双重能力。实际上，HTAP中的OLAP并非我们传统认知中，那每日处理数T日]]></description><author>疯狂打码中</author><pubDate>Thu, 06 Mar 2025 09:54:11 +0800</pubDate></item><item><title>Tcp（问题2）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488138&amp;idx=1&amp;sn=62b1421295fcce6e4bedf36b2087742c&amp;chksm=fb8df5abd4f70a00998f30fd051bdeda3fd875789139257ba9155e3251f46c5f6da946399567&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[滑动窗口干嘛用？我们已经知道了 TCP 有序号，并且还有重传，但是这还不够，因为我们不是愣头青，还需要根据情况来控制一下发送速率，因为网络是复杂多变的，有时候就会阻塞住，而有时候又很通畅。所以发送方需]]></description><author>疯狂打码中</author><pubDate>Wed, 05 Mar 2025 17:35:59 +0800</pubDate></item><item><title>31. 假设数据库成为了性能瓶颈点，动态数据查询如何提升效率</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488134&amp;idx=1&amp;sn=9e8e14985fe9d187b9c8f18361122705&amp;chksm=fb1a7d3bae98484f10822ee22dc7a7e26f3d8b0f922de81399cb865fcddb55a56d376551db94&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[假设我们有一个这样的电商系统，并且这个系统完成了对数据库的主从分离和分库分表之后，已经可以支撑十几万 DAU 了，整体系统的架构如下：从整体上看，数据库分成了主库和从库，数据也被切分到多个数据库节点上]]></description><author>疯狂打码中</author><pubDate>Fri, 28 Feb 2025 19:16:55 +0800</pubDate></item><item><title>TCP连接（常见问题1）</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488121&amp;idx=1&amp;sn=16dec2a68e9d11244a411c6c76c34e47&amp;chksm=fb70f6a855d1ae33859f97bc0a3add043fbbdec477289da4aaae0f83356c775fd8e199f515d6&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、前言近日，在与友人闲聊之际，话题不经意间转向了Tcp的探讨。在繁复的网络协议体系中，http、tcp、udp无疑是三块不可或缺的基石，掌握它们至关重要。此番，我们先聚焦于Tcp的常见疑惑，未来再逐]]></description><author>疯狂打码中</author><pubDate>Thu, 27 Feb 2025 17:41:26 +0800</pubDate></item><item><title>29. 如何优化系统架构设计来缓解流量压力提升并发性能？</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247488117&amp;idx=1&amp;sn=c263384af90796edcfcea37f1d97cc52&amp;chksm=fb3519776fcbd5fc01f36e3f8bf3d09d1b53ef9d2bccda108c054e0b8caa6edb43c073f0e99c&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[一、前言到了这里，看来这么多的场景题，发现场景题围绕 电商、直播、朋友圈、出行三个大业态进行的。因为这个符合招聘的趋势--阿里，字节，腾讯。都是围绕相应的业务进行的。二、背景我会以直播互动为例，带你看]]></description><author>疯狂打码中</author><pubDate>Wed, 26 Feb 2025 08:47:46 +0800</pubDate></item><item><title>面试场景题总结</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247487687&amp;idx=1&amp;sn=9acf256dd2e1da0b2ee644f0517d4795&amp;chksm=fb82115e135f9071292fcfb60386cdefa0bcd123233c2a313e859a0e718e80149c722c53a231&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[1、关于面试中的场景题为何面试中会频繁出现场景题？我个人认为，这背后的缘由颇为深刻，主要体现在以下几个方面。首先，面试者的背景往往纷繁复杂，他们或许并非科班出身，之前从事的领域与本职位大相径庭。面对这]]></description><author>疯狂打码中</author><pubDate>Tue, 25 Feb 2025 09:00:32 +0800</pubDate></item><item><title>14. 如何避免超预期的高并发压力压垮系统？</title><link>http://mp.weixin.qq.com/s?__biz=MzUzODkwMzMyMQ==&amp;mid=2247487683&amp;idx=1&amp;sn=7dc7420dfa4344e26901c6531164990e&amp;chksm=fb4fcaf7079aff55a136a6e06028725f7d4756570c91df090ad5f5e5948c54b002c1d0ee7dee&amp;scene=0&amp;xtrack=1#rd</link><description><![CDATA[在互联网高可用架构设计中，限流是一种经典的高可用架构模式。因为某些原因，大量用户突然访问我们的系统时，或者有黑客恶意用 DoS（Denial of Service，拒绝服务）方式攻击我们的系统时，这种]]></description><author>疯狂打码中</author><pubDate>Mon, 24 Feb 2025 17:42:04 +0800</pubDate></item></channel></rss>